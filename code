{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1io0_b0AE2z-JLeVP4TbW_A9rvaP0bQKx",
      "authorship_tag": "ABX9TyP4rUyIJ/oMrdfBSC2esH7f",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ARahmankhn/ARahmankhn/blob/main/Self_Healing_Epoxy_Coating.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Install or update scikit-learn, numpy, and pandas\n",
        "!pip install -U scikit-learn numpy pandas"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5Et8aKwo95zC",
        "outputId": "977e7ea1-7979-424c-8576-37df9901ab3b"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.6.1)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (2.2.4)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.3)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.14.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.6.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.1)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.ensemble import RandomForestRegressor, ExtraTreesRegressor\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn import linear_model\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import math\n",
        "\n",
        "# Load the dataset (from Table 2)\n",
        "data = {\n",
        "    'Sample': range(1, 33),\n",
        "    'MW_c': [230, 230, 230, 230, 400, 400, 400, 400, 2000, 2000, 2000, 2000, 4000, 4000, 4000, 4000,\n",
        "             230, 230, 230, 230, 400, 400, 400, 400, 2000, 2000, 2000, 2000, 4000, 4000, 4000, 4000],\n",
        "    'r': [0.55, 0.70, 0.85, 1.00, 0.55, 0.70, 0.85, 1.00, 0.55, 0.70, 0.85, 1.00, 0.55, 0.70, 0.85, 1.00,\n",
        "          0.55, 0.70, 0.85, 1.00, 0.55, 0.70, 0.85, 1.00, 0.55, 0.70, 0.85, 1.00, 0.55, 0.70, 0.85, 1.00],\n",
        "    'UPy-D400': [5, 10, 15, 20, 10, 5, 20, 15, 15, 20, 5, 10, 20, 15, 10, 5,\n",
        "                 20, 5, 10, 15, 15, 10, 5, 20, 10, 15, 20, 5, 5, 20, 15, 10],\n",
        "    'ZIF-8@Ca': [5.5, 8.5, 10.0, 7.0, 7.0, 10.0, 8.5, 5.5, 8.5, 5.5, 7.0, 10.0, 10.0, 7.0, 5.5, 8.5,\n",
        "                 7.0, 5.5, 8.5, 10.0, 5.5, 7.0, 10.0, 8.5, 10.0, 8.5, 5.5, 7.0, 8.5, 10.0, 7.0, 5.5],\n",
        "    'lg|Z|': [4.89, 5.12, 6.06, 8.91, 4.75, 5.39, 10.08, 10.55, 8.35, 10.05, 9.12, 7.23,\n",
        "              8.94, 8.04, 8.43, 6.44, 4.88, 4.93, 5.59, 7.97, 5.01, 7.31, 8.12, 10.87,\n",
        "              6.14, 9.29, 8.98, 6.92, 6.93, 8.35, 9.15, 6.95]\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "X = df[['MW_c', 'r', 'UPy-D400', 'ZIF-8@Ca']]\n",
        "y = df['lg|Z|']\n",
        "\n",
        "# Initialize models\n",
        "models = {\n",
        "    \"Random Forest\": RandomForestRegressor(random_state=42),\n",
        "    \"Extra Trees\": ExtraTreesRegressor(random_state=42),\n",
        "    \"Decision Tree\": DecisionTreeRegressor(random_state=42),\n",
        "    \"Linear Regression\": linear_model.LinearRegression()\n",
        "}\n",
        "\n",
        "# Evaluate models using cross-validation\n",
        "results = {}\n",
        "for name, model in models.items():\n",
        "    scores = cross_val_score(model, X, y, cv=5, scoring='r2')\n",
        "    results[name] = {\n",
        "        'Mean R²': np.mean(scores),\n",
        "        'Std R²': np.std(scores)\n",
        "    }\n",
        "\n",
        "# Display results\n",
        "results_df = pd.DataFrame(results).T\n",
        "print(\"Model Performance Comparison:\")\n",
        "print(results_df)\n",
        "\n",
        "# Train best model on full data\n",
        "best_model = RandomForestRegressor(random_state=42)\n",
        "best_model.fit(X, y)\n",
        "\n",
        "# Feature importance\n",
        "importance = pd.DataFrame({\n",
        "    'Feature': X.columns,\n",
        "    'Importance': best_model.feature_importances_\n",
        "}).sort_values('Importance', ascending=False)\n",
        "print(\"\\nFeature Importance:\")\n",
        "print(importance)\n",
        "###### the scikit-learning regression model\n",
        "from sklearn.neural_network import MLPRegressor     # neural_network\n",
        "from sklearn import svm # SVR\n",
        "from sklearn.linear_model import LinearRegression #linear regrssion(least square regression)\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import r2_score\n",
        "from sklearn.decomposition import SparsePCA\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn import preprocessing"
      ],
      "metadata": {
        "id": "fYfZwVZI98_a",
        "outputId": "3186dedf-d262-4504-f862-eb18ccf50e85",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model Performance Comparison:\n",
            "                    Mean R²    Std R²\n",
            "Random Forest      0.046443  0.469256\n",
            "Extra Trees       -0.131776  0.659024\n",
            "Decision Tree     -1.585370  1.360923\n",
            "Linear Regression -0.458659  0.884919\n",
            "\n",
            "Feature Importance:\n",
            "    Feature  Importance\n",
            "2  UPy-D400    0.355602\n",
            "1         r    0.296791\n",
            "0      MW_c    0.255774\n",
            "3  ZIF-8@Ca    0.091833\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.ensemble import RandomForestRegressor, ExtraTreesRegressor\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn import linear_model\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import math\n",
        "\n",
        "# Load the dataset (from Table 2)\n",
        "data = {\n",
        "    'Sample': range(1, 33),\n",
        "    'MW_c': [230, 230, 230, 230, 400, 400, 400, 400, 2000, 2000, 2000, 2000, 4000, 4000, 4000, 4000,\n",
        "             230, 230, 230, 230, 400, 400, 400, 400, 2000, 2000, 2000, 2000, 4000, 4000, 4000, 4000],\n",
        "    'r': [0.55, 0.70, 0.85, 1.00, 0.55, 0.70, 0.85, 1.00, 0.55, 0.70, 0.85, 1.00, 0.55, 0.70, 0.85, 1.00,\n",
        "          0.55, 0.70, 0.85, 1.00, 0.55, 0.70, 0.85, 1.00, 0.55, 0.70, 0.85, 1.00, 0.55, 0.70, 0.85, 1.00],\n",
        "    'UPy-D400': [5, 10, 15, 20, 10, 5, 20, 15, 15, 20, 5, 10, 20, 15, 10, 5,\n",
        "                 20, 5, 10, 15, 15, 10, 5, 20, 10, 15, 20, 5, 5, 20, 15, 10],\n",
        "    'ZIF-8@Ca': [5.5, 8.5, 10.0, 7.0, 7.0, 10.0, 8.5, 5.5, 8.5, 5.5, 7.0, 10.0, 10.0, 7.0, 5.5, 8.5,\n",
        "                 7.0, 5.5, 8.5, 10.0, 5.5, 7.0, 10.0, 8.5, 10.0, 8.5, 5.5, 7.0, 8.5, 10.0, 7.0, 5.5],\n",
        "    'lg|Z|': [4.89, 5.12, 6.06, 8.91, 4.75, 5.39, 10.08, 10.55, 8.35, 10.05, 9.12, 7.23,\n",
        "              8.94, 8.04, 8.43, 6.44, 4.88, 4.93, 5.59, 7.97, 5.01, 7.31, 8.12, 10.87,\n",
        "              6.14, 9.29, 8.98, 6.92, 6.93, 8.35, 9.15, 6.95]\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "X = df[['MW_c', 'r', 'UPy-D400', 'ZIF-8@Ca']]\n",
        "y = df['lg|Z|']\n",
        "\n",
        "# Initialize models\n",
        "models = {\n",
        "    \"Random Forest\": RandomForestRegressor(random_state=42),\n",
        "    \"Extra Trees\": ExtraTreesRegressor(random_state=42),\n",
        "    \"Decision Tree\": DecisionTreeRegressor(random_state=42),\n",
        "    \"Linear Regression\": linear_model.LinearRegression()\n",
        "}\n",
        "\n",
        "# Evaluate models using cross-validation\n",
        "results = {}\n",
        "for name, model in models.items():\n",
        "    scores = cross_val_score(model, X, y, cv=5, scoring='r2')\n",
        "    results[name] = {\n",
        "        'Mean R²': np.mean(scores),\n",
        "        'Std R²': np.std(scores)\n",
        "    }\n",
        "\n",
        "# Display results\n",
        "results_df = pd.DataFrame(results).T\n",
        "print(\"Model Performance Comparison:\")\n",
        "print(results_df)\n",
        "\n",
        "# Train best model on full data\n",
        "best_model = RandomForestRegressor(random_state=42)\n",
        "best_model.fit(X, y)\n",
        "\n",
        "# Feature importance\n",
        "importance = pd.DataFrame({\n",
        "    'Feature': X.columns,\n",
        "    'Importance': best_model.feature_importances_\n",
        "}).sort_values('Importance', ascending=False)\n",
        "print(\"\\nFeature Importance:\")\n",
        "print(importance)\n",
        "###### the scikit-learning regression model\n",
        "from sklearn.neural_network import MLPRegressor     # neural_network\n",
        "from sklearn import svm # SVR\n",
        "from sklearn.linear_model import LinearRegression #linear regrssion(least square regression)\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import r2_score\n",
        "from sklearn.decomposition import SparsePCA\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn import preprocessing\n",
        "###### the scikit-learning regression model\n",
        "from sklearn.neural_network import MLPRegressor     # neural_network\n",
        "from sklearn import svm # SVR\n",
        "from sklearn.linear_model import LinearRegression #linear regrssion(least square regression)\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import r2_score\n",
        "from sklearn.decomposition import SparsePCA\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn import preprocessing"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JhiyPtrqrUt6",
        "outputId": "efbba200-263c-40b4-b905-5b8779bf2511",
        "collapsed": true
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model Performance Comparison:\n",
            "                    Mean R²    Std R²\n",
            "Random Forest      0.046443  0.469256\n",
            "Extra Trees       -0.131776  0.659024\n",
            "Decision Tree     -1.585370  1.360923\n",
            "Linear Regression -0.458659  0.884919\n",
            "\n",
            "Feature Importance:\n",
            "    Feature  Importance\n",
            "2  UPy-D400    0.355602\n",
            "1         r    0.296791\n",
            "0      MW_c    0.255774\n",
            "3  ZIF-8@Ca    0.091833\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.ensemble import RandomForestRegressor, ExtraTreesRegressor\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn import linear_model\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import math\n",
        "\n",
        "# Load the dataset (from Table 2)\n",
        "data = {\n",
        "    'Sample': range(1, 33),\n",
        "    'MW_c': [230, 230, 230, 230, 400, 400, 400, 400, 2000, 2000, 2000, 2000, 4000, 4000, 4000, 4000,\n",
        "             230, 230, 230, 230, 400, 400, 400, 400, 2000, 2000, 2000, 2000, 4000, 4000, 4000, 4000],\n",
        "    'r': [0.55, 0.70, 0.85, 1.00, 0.55, 0.70, 0.85, 1.00, 0.55, 0.70, 0.85, 1.00, 0.55, 0.70, 0.85, 1.00,\n",
        "          0.55, 0.70, 0.85, 1.00, 0.55, 0.70, 0.85, 1.00, 0.55, 0.70, 0.85, 1.00, 0.55, 0.70, 0.85, 1.00],\n",
        "    'UPy-D400': [5, 10, 15, 20, 10, 5, 20, 15, 15, 20, 5, 10, 20, 15, 10, 5,\n",
        "                 20, 5, 10, 15, 15, 10, 5, 20, 10, 15, 20, 5, 5, 20, 15, 10],\n",
        "    'ZIF-8@Ca': [5.5, 8.5, 10.0, 7.0, 7.0, 10.0, 8.5, 5.5, 8.5, 5.5, 7.0, 10.0, 10.0, 7.0, 5.5, 8.5,\n",
        "                 7.0, 5.5, 8.5, 10.0, 5.5, 7.0, 10.0, 8.5, 10.0, 8.5, 5.5, 7.0, 8.5, 10.0, 7.0, 5.5],\n",
        "    'lg|Z|': [4.89, 5.12, 6.06, 8.91, 4.75, 5.39, 10.08, 10.55, 8.35, 10.05, 9.12, 7.23,\n",
        "              8.94, 8.04, 8.43, 6.44, 4.88, 4.93, 5.59, 7.97, 5.01, 7.31, 8.12, 10.87,\n",
        "              6.14, 9.29, 8.98, 6.92, 6.93, 8.35, 9.15, 6.95]\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "X = df[['MW_c', 'r', 'UPy-D400', 'ZIF-8@Ca']]\n",
        "y = df['lg|Z|']\n",
        "\n",
        "# Initialize models\n",
        "models = {\n",
        "    \"Random Forest\": RandomForestRegressor(random_state=42),\n",
        "    \"Extra Trees\": ExtraTreesRegressor(random_state=42),\n",
        "    \"Decision Tree\": DecisionTreeRegressor(random_state=42),\n",
        "    \"Linear Regression\": linear_model.LinearRegression()\n",
        "}\n",
        "\n",
        "# Evaluate models using cross-validation\n",
        "results = {}\n",
        "for name, model in models.items():\n",
        "    scores = cross_val_score(model, X, y, cv=5, scoring='r2')\n",
        "    results[name] = {\n",
        "        'Mean R²': np.mean(scores),\n",
        "        'Std R²': np.std(scores)\n",
        "    }\n",
        "\n",
        "# Display results\n",
        "results_df = pd.DataFrame(results).T\n",
        "print(\"Model Performance Comparison:\")\n",
        "print(results_df)\n",
        "\n",
        "# Train best model on full data\n",
        "best_model = RandomForestRegressor(random_state=42)\n",
        "best_model.fit(X, y)\n",
        "\n",
        "# Feature importance\n",
        "importance = pd.DataFrame({\n",
        "    'Feature': X.columns,\n",
        "    'Importance': best_model.feature_importances_\n",
        "}).sort_values('Importance', ascending=False)\n",
        "print(\"\\nFeature Importance:\")\n",
        "print(importance)\n",
        "###### the scikit-learning regression model\n",
        "from sklearn.neural_network import MLPRegressor     # neural_network\n",
        "from sklearn import svm # SVR\n",
        "from sklearn.linear_model import LinearRegression #linear regrssion(least square regression)\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import r2_score\n",
        "from sklearn.decomposition import SparsePCA\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn import preprocessing\n",
        "###### the scikit-learning regression model\n",
        "from sklearn.neural_network import MLPRegressor     # neural_network\n",
        "from sklearn import svm # SVR\n",
        "from sklearn.linear_model import LinearRegression #linear regrssion(least square regression)\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import r2_score\n",
        "from sklearn.decomposition import SparsePCA\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn import preprocessing\n",
        "\n",
        "from copy import deepcopy\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "def criteria(pre_value,true_value):\n",
        "    pres = deepcopy(pre_value)\n",
        "    for i in range(len(pres)):\n",
        "        pres[i] = float(pres[i])\n",
        "    pres = np.array(pres)\n",
        "\n",
        "    trues = deepcopy(true_value)\n",
        "    for i in range(len(trues)):\n",
        "        trues[i] = float(trues[i])\n",
        "    trues = np.array(trues)\n",
        "\n",
        "    APE = abs(pres-trues)/trues\n",
        "    MAPE = sum(APE)/len(APE)\n",
        "    RMSE = math.sqrt((sum((pres-trues)**2))/len(pres))\n",
        "    r2 = r2_score(true_value,pre_value)\n",
        "    return MAPE, RMSE, r2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8UB4tAivr544",
        "outputId": "57f8a785-c76d-4048-ef12-4c2bd341be2f",
        "collapsed": true
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model Performance Comparison:\n",
            "                    Mean R²    Std R²\n",
            "Random Forest      0.046443  0.469256\n",
            "Extra Trees       -0.131776  0.659024\n",
            "Decision Tree     -1.585370  1.360923\n",
            "Linear Regression -0.458659  0.884919\n",
            "\n",
            "Feature Importance:\n",
            "    Feature  Importance\n",
            "2  UPy-D400    0.355602\n",
            "1         r    0.296791\n",
            "0      MW_c    0.255774\n",
            "3  ZIF-8@Ca    0.091833\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.ensemble import RandomForestRegressor, ExtraTreesRegressor\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn import linear_model\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import math\n",
        "\n",
        "# Load the dataset (from Table 2)\n",
        "data = {\n",
        "    'Sample': range(1, 33),\n",
        "    'MW_c': [230, 230, 230, 230, 400, 400, 400, 400, 2000, 2000, 2000, 2000, 4000, 4000, 4000, 4000,\n",
        "             230, 230, 230, 230, 400, 400, 400, 400, 2000, 2000, 2000, 2000, 4000, 4000, 4000, 4000],\n",
        "    'r': [0.55, 0.70, 0.85, 1.00, 0.55, 0.70, 0.85, 1.00, 0.55, 0.70, 0.85, 1.00, 0.55, 0.70, 0.85, 1.00,\n",
        "          0.55, 0.70, 0.85, 1.00, 0.55, 0.70, 0.85, 1.00, 0.55, 0.70, 0.85, 1.00, 0.55, 0.70, 0.85, 1.00],\n",
        "    'UPy-D400': [5, 10, 15, 20, 10, 5, 20, 15, 15, 20, 5, 10, 20, 15, 10, 5,\n",
        "                 20, 5, 10, 15, 15, 10, 5, 20, 10, 15, 20, 5, 5, 20, 15, 10],\n",
        "    'ZIF-8@Ca': [5.5, 8.5, 10.0, 7.0, 7.0, 10.0, 8.5, 5.5, 8.5, 5.5, 7.0, 10.0, 10.0, 7.0, 5.5, 8.5,\n",
        "                 7.0, 5.5, 8.5, 10.0, 5.5, 7.0, 10.0, 8.5, 10.0, 8.5, 5.5, 7.0, 8.5, 10.0, 7.0, 5.5],\n",
        "    'lg|Z|': [4.89, 5.12, 6.06, 8.91, 4.75, 5.39, 10.08, 10.55, 8.35, 10.05, 9.12, 7.23,\n",
        "              8.94, 8.04, 8.43, 6.44, 4.88, 4.93, 5.59, 7.97, 5.01, 7.31, 8.12, 10.87,\n",
        "              6.14, 9.29, 8.98, 6.92, 6.93, 8.35, 9.15, 6.95]\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "X = df[['MW_c', 'r', 'UPy-D400', 'ZIF-8@Ca']]\n",
        "y = df['lg|Z|']\n",
        "\n",
        "# Initialize models\n",
        "models = {\n",
        "    \"Random Forest\": RandomForestRegressor(random_state=42),\n",
        "    \"Extra Trees\": ExtraTreesRegressor(random_state=42),\n",
        "    \"Decision Tree\": DecisionTreeRegressor(random_state=42),\n",
        "    \"Linear Regression\": linear_model.LinearRegression()\n",
        "}\n",
        "\n",
        "# Evaluate models using cross-validation\n",
        "results = {}\n",
        "for name, model in models.items():\n",
        "    scores = cross_val_score(model, X, y, cv=5, scoring='r2')\n",
        "    results[name] = {\n",
        "        'Mean R²': np.mean(scores),\n",
        "        'Std R²': np.std(scores)\n",
        "    }\n",
        "\n",
        "# Display results\n",
        "results_df = pd.DataFrame(results).T\n",
        "print(\"Model Performance Comparison:\")\n",
        "print(results_df)\n",
        "\n",
        "# Train best model on full data\n",
        "best_model = RandomForestRegressor(random_state=42)\n",
        "best_model.fit(X, y)\n",
        "\n",
        "# Feature importance\n",
        "importance = pd.DataFrame({\n",
        "    'Feature': X.columns,\n",
        "    'Importance': best_model.feature_importances_\n",
        "}).sort_values('Importance', ascending=False)\n",
        "print(\"\\nFeature Importance:\")\n",
        "print(importance)\n",
        "###### the scikit-learning regression model\n",
        "from sklearn.neural_network import MLPRegressor     # neural_network\n",
        "from sklearn import svm # SVR\n",
        "from sklearn.linear_model import LinearRegression #linear regrssion(least square regression)\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import r2_score\n",
        "from sklearn.decomposition import SparsePCA\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn import preprocessing\n",
        "###### the scikit-learning regression model\n",
        "from sklearn.neural_network import MLPRegressor     # neural_network\n",
        "from sklearn import svm # SVR\n",
        "from sklearn.linear_model import LinearRegression #linear regrssion(least square regression)\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import r2_score\n",
        "from sklearn.decomposition import SparsePCA\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn import preprocessing\n",
        "\n",
        "from copy import deepcopy\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "def criteria(pre_value,true_value):\n",
        "    pres = deepcopy(pre_value)\n",
        "    for i in range(len(pres)):\n",
        "        pres[i] = float(pres[i])\n",
        "    pres = np.array(pres)\n",
        "\n",
        "    trues = deepcopy(true_value)\n",
        "    for i in range(len(trues)):\n",
        "        trues[i] = float(trues[i])\n",
        "    trues = np.array(trues)\n",
        "\n",
        "    APE = abs(pres-trues)/trues\n",
        "    MAPE = sum(APE)/len(APE)\n",
        "    RMSE = math.sqrt((sum((pres-trues)**2))/len(pres))\n",
        "    r2 = r2_score(true_value,pre_value)\n",
        "    return MAPE, RMSE, r2\n",
        "from copy import deepcopy\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "def criteria(pre_value,true_value):\n",
        "    pres = deepcopy(pre_value)\n",
        "    for i in range(len(pres)):\n",
        "        pres[i] = float(pres[i])\n",
        "    pres = np.array(pres)\n",
        "\n",
        "    trues = deepcopy(true_value)\n",
        "    for i in range(len(trues)):\n",
        "        trues[i] = float(trues[i])\n",
        "    trues = np.array(trues)\n",
        "\n",
        "    APE = abs(pres-trues)/trues\n",
        "    MAPE = sum(APE)/len(APE)\n",
        "    RMSE = math.sqrt((sum((pres-trues)**2))/len(pres))\n",
        "    r2 = r2_score(true_value,pre_value)\n",
        "    return MAPE, RMSE, r2"
      ],
      "metadata": {
        "id": "OI3zVaRDyZqo",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ce908d90-fb13-4889-80fe-841a9955cc3e"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model Performance Comparison:\n",
            "                    Mean R²    Std R²\n",
            "Random Forest      0.046443  0.469256\n",
            "Extra Trees       -0.131776  0.659024\n",
            "Decision Tree     -1.585370  1.360923\n",
            "Linear Regression -0.458659  0.884919\n",
            "\n",
            "Feature Importance:\n",
            "    Feature  Importance\n",
            "2  UPy-D400    0.355602\n",
            "1         r    0.296791\n",
            "0      MW_c    0.255774\n",
            "3  ZIF-8@Ca    0.091833\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from pandas import read_csv\n",
        "with open('data_32_1.csv', encoding = 'UTF-8') as f:\n",
        "    names = ['MWc', 'r', 'U', 'MC', '|Z|']\n",
        "    data = read_csv(f, names = names)\n",
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "collapsed": true,
        "id": "MCF9iJNA3saH",
        "outputId": "0988b6a9-cf7a-4e66-e49f-7b109d263b5c"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              MWc     r         U         MC              |Z|\n",
              "0   MWc (g·mol⁻¹)     r  U (mol%)  MC (wt.%)  |Z| (lg(Ω·cm²))\n",
              "1             230  0.55         5        5.5             4.89\n",
              "2             230   0.7        10        8.5             5.12\n",
              "3             230  0.85        15       10.0             6.06\n",
              "4             230   1.0        20        7.0             8.91\n",
              "5             400  0.55        10        7.0             4.75\n",
              "6             400   0.7         5       10.0             5.39\n",
              "7             400  0.85        20        8.5            10.08\n",
              "8             400   1.0        15        5.5            10.55\n",
              "9            2000  0.55        15        8.5             8.35\n",
              "10           2000   0.7        20        5.5            10.05\n",
              "11           2000  0.85         5        7.0             9.12\n",
              "12           2000   1.0        10       10.0             7.23\n",
              "13           4000  0.55        20       10.0             8.94\n",
              "14           4000   0.7        15        7.0             8.04\n",
              "15           4000  0.85        10        5.5             8.43\n",
              "16           4000   1.0         5        8.5             6.44\n",
              "17            230  0.55        20        7.0             4.88\n",
              "18            230   0.7         5        5.5             4.93\n",
              "19            230  0.85        10        8.5             5.59\n",
              "20            230   1.0        15       10.0             7.97\n",
              "21            400  0.55        15        5.5             5.01\n",
              "22            400   0.7        10        7.0             7.31\n",
              "23            400  0.85         5       10.0             8.12\n",
              "24            400   1.0        20        8.5            10.87\n",
              "25           2000  0.55        10       10.0             6.14\n",
              "26           2000   0.7        15        8.5             9.29\n",
              "27           2000  0.85        20        5.5             8.98\n",
              "28           2000   1.0         5        7.0             6.92\n",
              "29           4000  0.55         5        8.5             6.93\n",
              "30           4000   0.7        20       10.0             8.35\n",
              "31           4000  0.85        15        7.0             9.15\n",
              "32           4000   1.0        10        5.5             6.95"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b1992675-fb41-4baf-a34d-59a784756532\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>MWc</th>\n",
              "      <th>r</th>\n",
              "      <th>U</th>\n",
              "      <th>MC</th>\n",
              "      <th>|Z|</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>MWc (g·mol⁻¹)</td>\n",
              "      <td>r</td>\n",
              "      <td>U (mol%)</td>\n",
              "      <td>MC (wt.%)</td>\n",
              "      <td>|Z| (lg(Ω·cm²))</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>230</td>\n",
              "      <td>0.55</td>\n",
              "      <td>5</td>\n",
              "      <td>5.5</td>\n",
              "      <td>4.89</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>230</td>\n",
              "      <td>0.7</td>\n",
              "      <td>10</td>\n",
              "      <td>8.5</td>\n",
              "      <td>5.12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>230</td>\n",
              "      <td>0.85</td>\n",
              "      <td>15</td>\n",
              "      <td>10.0</td>\n",
              "      <td>6.06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>230</td>\n",
              "      <td>1.0</td>\n",
              "      <td>20</td>\n",
              "      <td>7.0</td>\n",
              "      <td>8.91</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>400</td>\n",
              "      <td>0.55</td>\n",
              "      <td>10</td>\n",
              "      <td>7.0</td>\n",
              "      <td>4.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>400</td>\n",
              "      <td>0.7</td>\n",
              "      <td>5</td>\n",
              "      <td>10.0</td>\n",
              "      <td>5.39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>400</td>\n",
              "      <td>0.85</td>\n",
              "      <td>20</td>\n",
              "      <td>8.5</td>\n",
              "      <td>10.08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>400</td>\n",
              "      <td>1.0</td>\n",
              "      <td>15</td>\n",
              "      <td>5.5</td>\n",
              "      <td>10.55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2000</td>\n",
              "      <td>0.55</td>\n",
              "      <td>15</td>\n",
              "      <td>8.5</td>\n",
              "      <td>8.35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>2000</td>\n",
              "      <td>0.7</td>\n",
              "      <td>20</td>\n",
              "      <td>5.5</td>\n",
              "      <td>10.05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>2000</td>\n",
              "      <td>0.85</td>\n",
              "      <td>5</td>\n",
              "      <td>7.0</td>\n",
              "      <td>9.12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>2000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>10</td>\n",
              "      <td>10.0</td>\n",
              "      <td>7.23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>4000</td>\n",
              "      <td>0.55</td>\n",
              "      <td>20</td>\n",
              "      <td>10.0</td>\n",
              "      <td>8.94</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>4000</td>\n",
              "      <td>0.7</td>\n",
              "      <td>15</td>\n",
              "      <td>7.0</td>\n",
              "      <td>8.04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>4000</td>\n",
              "      <td>0.85</td>\n",
              "      <td>10</td>\n",
              "      <td>5.5</td>\n",
              "      <td>8.43</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>4000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5</td>\n",
              "      <td>8.5</td>\n",
              "      <td>6.44</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>230</td>\n",
              "      <td>0.55</td>\n",
              "      <td>20</td>\n",
              "      <td>7.0</td>\n",
              "      <td>4.88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>230</td>\n",
              "      <td>0.7</td>\n",
              "      <td>5</td>\n",
              "      <td>5.5</td>\n",
              "      <td>4.93</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>230</td>\n",
              "      <td>0.85</td>\n",
              "      <td>10</td>\n",
              "      <td>8.5</td>\n",
              "      <td>5.59</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>230</td>\n",
              "      <td>1.0</td>\n",
              "      <td>15</td>\n",
              "      <td>10.0</td>\n",
              "      <td>7.97</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>400</td>\n",
              "      <td>0.55</td>\n",
              "      <td>15</td>\n",
              "      <td>5.5</td>\n",
              "      <td>5.01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>400</td>\n",
              "      <td>0.7</td>\n",
              "      <td>10</td>\n",
              "      <td>7.0</td>\n",
              "      <td>7.31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>400</td>\n",
              "      <td>0.85</td>\n",
              "      <td>5</td>\n",
              "      <td>10.0</td>\n",
              "      <td>8.12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>400</td>\n",
              "      <td>1.0</td>\n",
              "      <td>20</td>\n",
              "      <td>8.5</td>\n",
              "      <td>10.87</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>2000</td>\n",
              "      <td>0.55</td>\n",
              "      <td>10</td>\n",
              "      <td>10.0</td>\n",
              "      <td>6.14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>2000</td>\n",
              "      <td>0.7</td>\n",
              "      <td>15</td>\n",
              "      <td>8.5</td>\n",
              "      <td>9.29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>2000</td>\n",
              "      <td>0.85</td>\n",
              "      <td>20</td>\n",
              "      <td>5.5</td>\n",
              "      <td>8.98</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>2000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5</td>\n",
              "      <td>7.0</td>\n",
              "      <td>6.92</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>4000</td>\n",
              "      <td>0.55</td>\n",
              "      <td>5</td>\n",
              "      <td>8.5</td>\n",
              "      <td>6.93</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>4000</td>\n",
              "      <td>0.7</td>\n",
              "      <td>20</td>\n",
              "      <td>10.0</td>\n",
              "      <td>8.35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>4000</td>\n",
              "      <td>0.85</td>\n",
              "      <td>15</td>\n",
              "      <td>7.0</td>\n",
              "      <td>9.15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>4000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>10</td>\n",
              "      <td>5.5</td>\n",
              "      <td>6.95</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b1992675-fb41-4baf-a34d-59a784756532')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b1992675-fb41-4baf-a34d-59a784756532 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b1992675-fb41-4baf-a34d-59a784756532');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ceb0ccf2-4c2f-44ff-be38-c5dc1b703d7d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ceb0ccf2-4c2f-44ff-be38-c5dc1b703d7d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ceb0ccf2-4c2f-44ff-be38-c5dc1b703d7d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_fd7a3ebc-b0d9-4c84-a8c6-b0bb13918a89\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_fd7a3ebc-b0d9-4c84-a8c6-b0bb13918a89 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 33,\n  \"fields\": [\n    {\n      \"column\": \"MWc\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"230\",\n          \"4000\",\n          \"400\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"r\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"0.55\",\n          \"1.0\",\n          \"0.7\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"U\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"5\",\n          \"20\",\n          \"10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MC\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"5.5\",\n          \"7.0\",\n          \"8.5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"|Z|\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 32,\n        \"samples\": [\n          \"6.93\",\n          \"8.43\",\n          \"10.87\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Y = data['|Z|'].values\n",
        "\n",
        "excluded = ['|Z|']\n",
        "X = data.drop(excluded, axis = 1)\n",
        "print('There are %s possible descriptor: \\n' % X.shape[1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TT74gxrhYjfq",
        "outputId": "e3b146d8-2527-4d2d-8099-45edabd0736d"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "There are 4 possible descriptor: \n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "training_results = []\n",
        "training_results.append(['actual value','ANN','SVR','LR','RF'])\n",
        "training_temp = []\n",
        "\n",
        "testing_results = []\n",
        "testing_results.append(['actual value','ANN','SVR','LR','RF'])\n",
        "testing_temp=[]"
      ],
      "metadata": {
        "id": "HNUZRU4qZLSA"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "training_X,testing_X,training_Y,testing_Y = train_test_split(X, Y, test_size = 0.2,\n",
        "                                                    random_state = 1)\n",
        "print(training_Y)\n",
        "training_temp.append(training_Y)\n",
        "testing_temp.append(testing_Y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "JZDIhTUWZpJX",
        "outputId": "a912bbbd-73e7-46bc-a726-caa890220445"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['6.14' '10.87' '8.35' '4.88' '7.31' '8.91' '5.12' '5.01' '8.12' '10.05'\n",
            " '6.93' '6.92' '4.93' '5.39' '8.94' '10.08' '6.95' '4.89' '6.44'\n",
            " '|Z| (lg(Ω·cm²))' '8.43' '4.75' '9.12' '8.35' '10.55' '7.23']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from pandas import read_csv\n",
        "with open('data_32_1.csv', encoding = 'UTF-8') as f:\n",
        "    names = ['MWc', 'r', 'U', 'MC', '|Z|']\n",
        "    data = read_csv(f, names = names)\n",
        "data\n",
        "\n",
        "Y = data['|Z|'].values\n",
        "\n",
        "excluded = ['|Z|']\n",
        "X = data.drop(excluded, axis = 1)\n",
        "print('There are %s possible descriptor: \\n' % X.shape[1])\n",
        "training_results = []\n",
        "training_results.append(['actual value','ANN','SVR','LR','RF'])\n",
        "training_temp = []\n",
        "\n",
        "testing_results = []\n",
        "testing_results.append(['actual value','ANN','SVR','LR','RF'])\n",
        "testing_temp=[]\n",
        "\n",
        "training_X,testing_X,training_Y,testing_Y = train_test_split(X, Y, test_size = 0.2,\n",
        "                                                    random_state = 1)\n",
        "print(training_Y)\n",
        "training_temp.append(training_Y)\n",
        "testing_temp.append(testing_Y)\n",
        "\n",
        "import pandas as pd\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "\n",
        "# 1. Load data correctly (skip header if needed)\n",
        "with open('data_32_1.csv', encoding='UTF-8') as f:\n",
        "    # If file has headers, use header=0. If no headers, use header=None\n",
        "    data = pd.read_csv(f, header=None, names=['MWc', 'r', 'U', 'MC', '|Z|'])\n",
        "\n",
        "# 2. Verify data types\n",
        "print(data.dtypes)\n",
        "\n",
        "# 3. Convert all columns to numeric (if needed)\n",
        "for col in data.columns:\n",
        "    data[col] = pd.to_numeric(data[col], errors='coerce')\n",
        "\n",
        "# 4. Remove any rows with NaN values (from failed conversions)\n",
        "data = data.dropna()\n",
        "\n",
        "# 5. Prepare features and target\n",
        "X = data[['MWc', 'r', 'U', 'MC']]\n",
        "Y = data['|Z|']\n",
        "\n",
        "# 6. Train-test split\n",
        "training_X, testing_X, training_Y, testing_Y = train_test_split(\n",
        "    X, Y, test_size=0.2, random_state=1\n",
        ")\n",
        "\n",
        "# 7. Train Random Forest\n",
        "clf_RF = RandomForestRegressor(\n",
        "    n_estimators=2000,\n",
        "    min_samples_leaf=1,\n",
        "    max_features=2,\n",
        "    oob_score=True,\n",
        "    random_state=42  # Added for reproducibility\n",
        ")\n",
        "clf_RF.fit(training_X, training_Y)\n",
        "\n",
        "# 8. Make predictions\n",
        "fit_RF = clf_RF.predict(training_X)\n",
        "pre_RF = clf_RF.predict(testing_X)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xDwMDLBDZt1L",
        "outputId": "acd88add-0cc3-4a0b-fd85-74bab082f32b"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "There are 4 possible descriptor: \n",
            "\n",
            "['6.14' '10.87' '8.35' '4.88' '7.31' '8.91' '5.12' '5.01' '8.12' '10.05'\n",
            " '6.93' '6.92' '4.93' '5.39' '8.94' '10.08' '6.95' '4.89' '6.44'\n",
            " '|Z| (lg(Ω·cm²))' '8.43' '4.75' '9.12' '8.35' '10.55' '7.23']\n",
            "MWc    object\n",
            "r      object\n",
            "U      object\n",
            "MC     object\n",
            "|Z|    object\n",
            "dtype: object\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import KFold, cross_val_score\n",
        "\n",
        "crossvalidation = KFold(n_splits = 10, shuffle = True)\n",
        "mape_scores = cross_val_score(clf_RF, X, Y, scoring = 'neg_mean_absolute_percentage_error', cv = crossvalidation)\n",
        "r2_scores = cross_val_score(clf_RF, X, Y, scoring = 'r2', cv = crossvalidation)\n",
        "rmse_scores = cross_val_score(clf_RF, X, Y, scoring = 'neg_root_mean_squared_error', cv = crossvalidation)\n",
        "print('Cross-validation results:')\n",
        "print('Folds: %i, mean MAPE: %.3f' % (len(mape_scores), -np.mean(mape_scores)))\n",
        "print('Folds: %i, mean R2: %.3f' % (len(r2_scores), np.mean(r2_scores)))\n",
        "print('Folds: %i, mean RMSE: %.3f' % (len(rmse_scores), -np.mean(rmse_scores)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "14n6tlASc6ef",
        "outputId": "0e40a009-49ba-4231-8043-dca781c88ad4"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cross-validation results:\n",
            "Folds: 10, mean MAPE: 0.165\n",
            "Folds: 10, mean R2: -0.274\n",
            "Folds: 10, mean RMSE: 1.319\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_predict\n",
        "y_cv = cross_val_predict(clf_RF, X, Y, cv = crossvalidation)\n",
        "print(Y, y_cv)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cTenULGEffJK",
        "outputId": "0f5462a1-6545-4b36-825e-ecb7829bdfc9"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1      4.89\n",
            "2      5.12\n",
            "3      6.06\n",
            "4      8.91\n",
            "5      4.75\n",
            "6      5.39\n",
            "7     10.08\n",
            "8     10.55\n",
            "9      8.35\n",
            "10    10.05\n",
            "11     9.12\n",
            "12     7.23\n",
            "13     8.94\n",
            "14     8.04\n",
            "15     8.43\n",
            "16     6.44\n",
            "17     4.88\n",
            "18     4.93\n",
            "19     5.59\n",
            "20     7.97\n",
            "21     5.01\n",
            "22     7.31\n",
            "23     8.12\n",
            "24    10.87\n",
            "25     6.14\n",
            "26     9.29\n",
            "27     8.98\n",
            "28     6.92\n",
            "29     6.93\n",
            "30     8.35\n",
            "31     9.15\n",
            "32     6.95\n",
            "Name: |Z|, dtype: float64 [5.2457    5.872945  7.74508   7.183965  6.48233   7.0681425 9.02642\n",
            " 7.994275  7.16338   8.22114   7.1553    7.437105  7.80266   8.88202\n",
            " 7.67991   7.427335  7.40735   5.997215  7.01441   6.741595  7.83207\n",
            " 5.708575  6.277075  9.46728   6.74991   8.378715  9.281015  7.93108\n",
            " 6.72695   8.84568   8.51887   7.804485 ]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt  # Import Matplotlib\n",
        "plt.figure(figsize = (5, 5))\n",
        "plt.plot([3, 12], [3, 12], 'r--')\n",
        "plt.scatter(Y, y_cv, s = 80, edgecolor = 'r', alpha = 0.7)\n",
        "plt.xlabel(\"Actual Values (Y)\")\n",
        "plt.ylabel(\"Predicted Values (y_cv)\")\n",
        "plt.title(\"Actual vs. Predicted (Cross-Validation)\")\n",
        "\n",
        "plt.show()  # Display the plot"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "RWz6ABJCkKBW",
        "outputId": "285c47f6-b51f-497e-984e-1ace5f7eded6"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "training_temp = (np.array(training_temp).T.tolist())\n",
        "testing_temp = (np.array(testing_temp).T.tolist())\n",
        "\n",
        "paper_result = pd.DataFrame(training_temp)\n",
        "paper_result.to_csv('training_32_RF.csv')\n",
        "testing_result = pd.DataFrame(testing_temp)\n",
        "testing_result.to_csv('testing_32_RF.csv')"
      ],
      "metadata": {
        "id": "8U66X7EqpKKI"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "import pandas as pd\n",
        "\n",
        "# 1. Train your model (assuming training data is properly prepared)\n",
        "clf_LR = LinearRegression()\n",
        "clf_LR.fit(training_X, training_Y)\n",
        "\n",
        "# 2. Make predictions on training/test data\n",
        "train_pred = clf_LR.predict(training_X)\n",
        "test_pred = clf_LR.predict(testing_X)\n",
        "\n",
        "# 3. Load NEW data for predictions - FIXED VERSION\n",
        "# Option A: If CSV has header row\n",
        "x_pre = pd.read_csv('data_32_2.csv')\n",
        "\n",
        "# Option B: If CSV has NO header row\n",
        "x_pre = pd.read_csv('data_32_2.csv', header=None, names=['MWc', 'r', 'U', 'MC'])\n",
        "\n",
        "# 4. CRITICAL: Ensure same features as training data\n",
        "# Convert to numeric and drop NA if needed\n",
        "x_pre = x_pre.apply(pd.to_numeric, errors='coerce').dropna()\n",
        "\n",
        "# 5. Verify structure matches training data\n",
        "print(\"Feature columns in new data:\", x_pre.columns)\n",
        "print(\"Feature columns in training:\", training_X.columns)\n",
        "\n",
        "# 6. Make predictions\n",
        "try:\n",
        "    y_pre = clf_LR.predict(x_pre)\n",
        "    print(\"Predictions:\", y_pre)\n",
        "except Exception as e:\n",
        "    print(\"Prediction failed:\", str(e))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vLy7suGCloGt",
        "outputId": "bbf96504-a42b-438b-9c9c-766b49a1cd95"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Feature columns in new data: Index(['MWc', 'r', 'U', 'MC'], dtype='object')\n",
            "Feature columns in training: Index(['MWc', 'r', 'U', 'MC'], dtype='object')\n",
            "Predictions: [4.84155006 6.06642489 7.41630693 9.14121059 5.62271555 5.16240843\n",
            " 8.44748684 8.48720855 6.93871556 8.66361922 6.64313735 7.86801219\n",
            " 8.40431962 8.44404133 8.35875584 7.89844871 7.24431578 5.47384833\n",
            " 6.69872316 8.0486052  6.59031374 6.25501382 5.7947067  9.07978511\n",
            " 5.97111737 7.57101383 9.29591749 7.27543563 6.0015539  9.03661789\n",
            " 9.07633961 8.99105411]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import KFold, cross_val_score\n",
        "\n",
        "crossvalidation = KFold(n_splits = 10, shuffle = True)\n",
        "mape_scores = cross_val_score(clf_LR, X, Y, scoring = 'neg_mean_absolute_percentage_error', cv = crossvalidation)\n",
        "r2_scores = cross_val_score(clf_LR, X, Y, scoring = 'r2', cv = crossvalidation)\n",
        "rmse_scores = cross_val_score(clf_LR, X, Y, scoring = 'neg_root_mean_squared_error', cv = crossvalidation)\n",
        "print('Cross-validation results:')\n",
        "print('Folds: %i, mean MAPE: %.3f' % (len(mape_scores), -np.mean(mape_scores)))\n",
        "print('Folds: %i, mean R2: %.3f' % (len(r2_scores), np.mean(r2_scores)))\n",
        "print('Folds: %i, mean RMSE: %.3f' % (len(rmse_scores), -np.mean(rmse_scores)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "woyjoLudl0Ea",
        "outputId": "2a579a00-c55d-4113-ee13-1e2d4cec3eec"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cross-validation results:\n",
            "Folds: 10, mean MAPE: 0.171\n",
            "Folds: 10, mean R2: -6.513\n",
            "Folds: 10, mean RMSE: 1.369\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_predict\n",
        "y_cv = cross_val_predict(clf_LR, X, Y, cv = crossvalidation)"
      ],
      "metadata": {
        "id": "nPL4GUdDmMHk"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize = (5, 5))\n",
        "plt.plot([3, 12], [3, 12], 'r--')\n",
        "plt.scatter(Y, y_cv, s = 80, edgecolor = 'r', alpha = 0.7)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 457
        },
        "id": "VPpY-7GmmRV8",
        "outputId": "e3f0a6fc-d8bc-4a72-df6a-47e904a05e5c"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7fcde2cd8810>"
            ]
          },
          "metadata": {},
          "execution_count": 20
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "training_temp = (np.array(training_temp).T.tolist())\n",
        "testing_temp = (np.array(testing_temp).T.tolist())\n",
        "\n",
        "paper_result = pd.DataFrame(training_temp)\n",
        "paper_result.to_csv('training_32_LR.csv')\n",
        "testing_result = pd.DataFrame(testing_temp)\n",
        "testing_result.to_csv('testing_32_LR.csv')"
      ],
      "metadata": {
        "id": "eQBgOm1wmY3P"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "###########################################################  ANN\n",
        "clf_ANN = MLPRegressor(solver='lbfgs', alpha=1e-5, max_iter=1000, random_state=1)\n",
        "clf_ANN.fit(training_X, training_Y)\n",
        "\n",
        "# 1. First verify training works\n",
        "fit_ANN = clf_ANN.predict(training_X)\n",
        "pre_ANN = clf_ANN.predict(testing_X)\n",
        "\n",
        "# 2. Load prediction data with verification\n",
        "try:\n",
        "    with open('data_32_2.csv', encoding='UTF-8') as f:\n",
        "        x_pre = read_csv(f)\n",
        "        print(\"\\nRaw loaded data:\")\n",
        "        print(x_pre.head())\n",
        "\n",
        "        # Handle header if needed\n",
        "        if 'MWc' not in x_pre.columns:\n",
        "            x_pre = read_csv(f, names=['MWc', 'r', 'U', 'MC'])\n",
        "\n",
        "        # Verify columns match training data\n",
        "        print(\"\\nColumns in prediction data:\", x_pre.columns)\n",
        "        print(\"Columns in training data:\", training_X.columns)\n",
        "\n",
        "        # Ensure same column order as training\n",
        "        x_pre = x_pre[training_X.columns]\n",
        "\n",
        "        # Check for NaN values\n",
        "        print(\"\\nMissing values:\")\n",
        "        print(x_pre.isnull().sum())\n",
        "\n",
        "        # Convert to numpy if needed\n",
        "        X_pred = x_pre.values if isinstance(x_pre, pd.DataFrame) else x_pre\n",
        "\n",
        "        # Make predictions\n",
        "        y_pre = clf_ANN.predict(X_pred)\n",
        "        print(\"\\nPredictions:\", y_pre)\n",
        "\n",
        "except Exception as e:\n",
        "    print(f\"\\nError during prediction: {str(e)}\")\n",
        "    print(\"Data shape:\", x_pre.shape if 'x_pre' in locals() else \"No data loaded\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NQfdgFb579dx",
        "outputId": "614e8bf4-7c84-413e-85fb-de464c2e44a9"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Raw loaded data:\n",
            "   MWc     r   U    MC\n",
            "0  230  0.55   5   5.5\n",
            "1  230  0.70  10   8.5\n",
            "2  230  0.85  15  10.0\n",
            "3  230  1.00  20   7.0\n",
            "4  400  0.55  10   7.0\n",
            "\n",
            "Columns in prediction data: Index(['MWc', 'r', 'U', 'MC'], dtype='object')\n",
            "Columns in training data: Index(['MWc', 'r', 'U', 'MC'], dtype='object')\n",
            "\n",
            "Missing values:\n",
            "MWc    0\n",
            "r      0\n",
            "U      0\n",
            "MC     0\n",
            "dtype: int64\n",
            "\n",
            "Predictions: [ 3.45425896  5.796795    7.58319189  7.70117133  5.35498191  5.19857055\n",
            "  8.37163653  6.00213435  8.10397227  8.22195171  5.03338535  7.37592138\n",
            " 11.09024023  8.72073805  6.90737501  6.72217696  7.74162055  3.44077589\n",
            "  5.78331193  7.56970881  6.04258357  5.34149883  5.18846778  8.35815346\n",
            "  7.4163706   8.0904892   8.20846864  5.01990227  6.75248529 11.07675716\n",
            "  8.70725498  6.89389194]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but MLPRegressor was fitted with feature names\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "source": [
        "from copy import deepcopy\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "def criteria(pre_value,true_value):\n",
        "    pres = deepcopy(pre_value)\n",
        "    for i in range(len(pres)):\n",
        "        pres[i] = float(pres[i])\n",
        "    pres = np.array(pres)\n",
        "\n",
        "    trues = deepcopy(true_value)\n",
        "    # Use .values to get the underlying NumPy array of the Series\n",
        "    # This ensures you're iterating over the actual data values\n",
        "    for i in range(len(trues.values)):\n",
        "        trues.values[i] = float(trues.values[i])\n",
        "    trues = np.array(trues.values)\n",
        "\n",
        "    APE = abs(pres-trues)/trues\n",
        "    MAPE = sum(APE)/len(APE)\n",
        "    RMSE = math.sqrt((sum((pres-trues)**2))/len(pres))\n",
        "    r2 = r2_score(true_value,pre_value)\n",
        "    return MAPE, RMSE, r2"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "kEpQoKN9mlnQ"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import KFold, cross_val_score\n",
        "\n",
        "crossvalidation = KFold(n_splits = 10, shuffle = True)\n",
        "mape_scores = cross_val_score(clf_ANN, X, Y, scoring = 'neg_mean_absolute_percentage_error', cv = crossvalidation)\n",
        "r2_scores = cross_val_score(clf_ANN, X, Y, scoring = 'r2', cv = crossvalidation)\n",
        "rmse_scores = cross_val_score(clf_ANN, X, Y, scoring = 'neg_root_mean_squared_error', cv = crossvalidation)\n",
        "mae_scores = cross_val_score(clf_ANN, X, Y, scoring = 'neg_mean_absolute_error', cv = crossvalidation)\n",
        "print('Cross-validation results:')\n",
        "print('Folds: %i, mean MAPE: %.3f' % (len(mape_scores), -np.mean(mape_scores)))\n",
        "print('Folds: %i, mean R2: %.3f' % (len(r2_scores), np.mean(r2_scores)))\n",
        "print('Folds: %i, mean RMSE: %.3f' % (len(rmse_scores), -np.mean(rmse_scores)))\n",
        "print('Folds: %i, mean MAE: %.3f' % (len(mae_scores), -np.mean(mae_scores)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jLyXA8Xem0mD",
        "outputId": "56477beb-d8d1-43dd-c22d-1fafcb7f6420"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cross-validation results:\n",
            "Folds: 10, mean MAPE: 0.199\n",
            "Folds: 10, mean R2: -0.512\n",
            "Folds: 10, mean RMSE: 1.708\n",
            "Folds: 10, mean MAE: 1.469\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_predict\n",
        "y_cv = cross_val_predict(clf_ANN, X, Y, cv = crossvalidation)"
      ],
      "metadata": {
        "id": "d1xdrGY6m3LF"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.figure(figsize = (5, 5))\n",
        "plt.plot([3, 12], [3, 12], 'r--')\n",
        "plt.scatter(Y, y_cv, s = 80, edgecolor = 'r', alpha = 0.7)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 457
        },
        "id": "rrOyUUmAm73t",
        "outputId": "c49fc0ff-04e1-4af4-89e4-5ad57ad79e86"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7fcdde57fb50>"
            ]
          },
          "metadata": {},
          "execution_count": 26
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "from matplotlib.ticker import MultipleLocator\n",
        "from sklearn.metrics import r2_score\n",
        "\n",
        "plt.style.use('seaborn-v0_8')  # Modern and clean style\n",
        "\n",
        "# Create figure with constrained layout (better than tight_layout)\n",
        "fig, ax = plt.subplots(figsize=(6, 6), dpi=300, layout='constrained')\n",
        "\n",
        "# Main scatter plot with enhanced styling\n",
        "scatter = ax.scatter(Y, y_cv,\n",
        "                    s=120,\n",
        "                    c=np.abs(Y - y_cv),  # Color by error magnitude\n",
        "                    cmap='viridis',\n",
        "                    edgecolor='w',\n",
        "                    linewidth=0.5,\n",
        "                    alpha=0.8,\n",
        "                    zorder=3)\n",
        "\n",
        "# Perfect prediction line\n",
        "ax.plot([3, 12], [3, 12],\n",
        "       'r--',\n",
        "       lw=1.5,\n",
        "       alpha=0.7,\n",
        "       label='Perfect prediction')\n",
        "\n",
        "# Add colorbar for error magnitude\n",
        "cbar = fig.colorbar(scatter, ax=ax, shrink=0.9)\n",
        "cbar.set_label('Absolute Error', fontsize=10)\n",
        "\n",
        "# Calculate and display metrics in legend\n",
        "mape_value = np.mean(np.abs((Y - y_cv)/Y)*100)  # Calculate MAPE separately\n",
        "metrics_text = (f'$R^2$ = {r2_score(Y, y_cv):.3f}\\n'\n",
        "               f'RMSE = {np.sqrt(np.mean((Y - y_cv)**2)):.3f}\\n'\n",
        "               f'MAPE = {mape_value:.2f}%')\n",
        "\n",
        "ax.text(0.05, 0.95, metrics_text,\n",
        "       transform=ax.transAxes,\n",
        "       verticalalignment='top',\n",
        "       bbox=dict(facecolor='white', alpha=0.8, edgecolor='none'))\n",
        "\n",
        "# Styling adjustments\n",
        "ax.set_xlabel('Actual |Z|', fontsize=12, labelpad=10)\n",
        "ax.set_ylabel('Predicted |Z|', fontsize=12, labelpad=10)\n",
        "ax.set_title('Actual vs Predicted Impedance\\n(10-Fold Cross Validation)',\n",
        "            fontsize=13, pad=15)\n",
        "\n",
        "# Grid and tick formatting\n",
        "ax.grid(True, which='both', linestyle=':', alpha=0.4)\n",
        "ax.xaxis.set_minor_locator(MultipleLocator(0.5))\n",
        "ax.yaxis.set_minor_locator(MultipleLocator(0.5))\n",
        "ax.tick_params(axis='both', which='major', labelsize=10)\n",
        "\n",
        "# Equal aspect ratio\n",
        "ax.set_aspect('equal', adjustable='box')\n",
        "\n",
        "# Add diagonal text annotation\n",
        "ax.annotate('Better', xy=(8, 6.5), xytext=(9, 5.5),\n",
        "           arrowprops=dict(arrowstyle='->', color='gray'),\n",
        "           fontsize=9, color='gray')\n",
        "\n",
        "plt.savefig('cv_prediction_plot.png', dpi=300, bbox_inches='tight')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "-tNXUVa78in-",
        "outputId": "861e62b7-79c8-4a37-99bc-7e06d78fcd40"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x1800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "training_temp = (np.array(training_temp).T.tolist())\n",
        "testing_temp = (np.array(testing_temp).T.tolist())\n",
        "\n",
        "paper_result = pd.DataFrame(training_temp)\n",
        "paper_result.to_csv('training_32_ANN.csv')\n",
        "testing_result = pd.DataFrame(testing_temp)\n",
        "testing_result.to_csv('testing_32_ANN.csv')"
      ],
      "metadata": {
        "id": "tZeR9KTAm_zc"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "###########################################################   SVR\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# Scale the data (important for SVR)\n",
        "scaler = StandardScaler()\n",
        "training_X_scaled = scaler.fit_transform(training_X)\n",
        "testing_X_scaled = scaler.transform(testing_X)\n",
        "\n",
        "# Initialize and train SVR\n",
        "clf_SVR = svm.SVR(kernel='rbf', tol=1e-3, C=300, epsilon=0.01, gamma=1)\n",
        "clf_SVR.fit(training_X_scaled, training_Y)\n",
        "\n",
        "# Make predictions\n",
        "fit_SVR = clf_SVR.predict(training_X_scaled)\n",
        "pre_SVR = clf_SVR.predict(testing_X_scaled)\n",
        "\n",
        "# Evaluate\n",
        "training_criteria = criteria(fit_SVR, training_Y)\n",
        "testing_criteria = criteria(pre_SVR, testing_Y)\n",
        "print('SVR training:', training_criteria)\n",
        "print('SVR testing:', testing_criteria)\n",
        "\n",
        "# Store results\n",
        "training_temp.append(fit_SVR)\n",
        "testing_temp.append(pre_SVR)\n",
        "\n",
        "# Prediction on new data\n",
        "try:\n",
        "    with open('data_32_2.csv', encoding='UTF-8') as f:\n",
        "        # Skip header if exists\n",
        "        x_pre = read_csv(f, header=None, names=['MWc', 'r', 'U', 'MC'])\n",
        "\n",
        "        # Verify numerical data\n",
        "        print(\"\\nPreview of prediction data:\")\n",
        "        print(x_pre.head())\n",
        "        print(\"\\nData types:\")\n",
        "        print(x_pre.dtypes)\n",
        "\n",
        "        # Convert to numerical if needed\n",
        "        x_pre = x_pre.apply(pd.to_numeric, errors='coerce')\n",
        "\n",
        "        # Scale the prediction data\n",
        "        x_pre_scaled = scaler.transform(x_pre)\n",
        "        y_pre = clf_SVR.predict(x_pre_scaled)\n",
        "\n",
        "        print(\"\\nPredictions:\")\n",
        "        print(y_pre)\n",
        "\n",
        "except Exception as e:\n",
        "    print(f\"\\nError during prediction: {str(e)}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OAFW6cz7nEpS",
        "outputId": "268c68b9-7f71-4e60-90e3-e767054f0e1e"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SVR training: (np.float64(0.0014084749143199774), 0.009887266608325894, 0.9999699741046698)\n",
            "SVR testing: (np.float64(0.17504717135650646), 1.3610383560140902, 0.4675121058176358)\n",
            "\n",
            "Preview of prediction data:\n",
            "   MWc     r   U   MC\n",
            "0  MWc     r   U   MC\n",
            "1  230  0.55   5  5.5\n",
            "2  230   0.7  10  8.5\n",
            "3  230  0.85  15   10\n",
            "4  230     1  20    7\n",
            "\n",
            "Data types:\n",
            "MWc    object\n",
            "r      object\n",
            "U      object\n",
            "MC     object\n",
            "dtype: object\n",
            "\n",
            "Error during prediction: Input X contains NaN.\n",
            "SVR does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
          ]
        }
      ]
    },
    {
      "source": [
        "###########################################################   SVR\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# 1. Data Scaling\n",
        "scaler = StandardScaler()\n",
        "training_X_scaled = scaler.fit_transform(training_X)\n",
        "testing_X_scaled = scaler.transform(testing_X)\n",
        "\n",
        "# 2. Model Training\n",
        "clf_SVR = svm.SVR(kernel='rbf', tol=1e-3, C=300, epsilon=0.01, gamma=1)\n",
        "clf_SVR.fit(training_X_scaled, training_Y)\n",
        "\n",
        "# 3. Evaluation\n",
        "fit_SVR = clf_SVR.predict(training_X_scaled)\n",
        "pre_SVR = clf_SVR.predict(testing_X_scaled)\n",
        "\n",
        "training_criteria = criteria(fit_SVR, training_Y)\n",
        "testing_criteria = criteria(pre_SVR, testing_Y)\n",
        "print('SVR training:', training_criteria)\n",
        "print('SVR testing:', testing_criteria)\n",
        "\n",
        "# 4. Prediction on New Data\n",
        "try:\n",
        "    # Read CSV properly - skip header row if it exists\n",
        "    x_pre = pd.read_csv('data_32_2.csv',\n",
        "                       header=None,  # Treat first row as data\n",
        "                       names=['MWc', 'r', 'U', 'MC'])\n",
        "\n",
        "    # Verify data is numeric\n",
        "    print(\"\\nData Preview:\")\n",
        "    print(x_pre.head())\n",
        "\n",
        "    # Convert all columns to numeric, coercing errors to NaN\n",
        "    x_pre = x_pre.apply(pd.to_numeric, errors='coerce')\n",
        "\n",
        "    # Check for missing values\n",
        "    if x_pre.isnull().any().any():\n",
        "        print(\"\\nWarning: Missing values detected after conversion:\")\n",
        "        print(x_pre.isnull().sum())\n",
        "        x_pre = x_pre.fillna(0)  # or use another imputation method\n",
        "\n",
        "    # Scale the data\n",
        "    x_pre_scaled = scaler.transform(x_pre)\n",
        "    y_pre = clf_SVR.predict(x_pre_scaled)\n",
        "\n",
        "    print(\"\\nPredictions:\")\n",
        "    print(pd.DataFrame({'Features': x_pre.values.tolist(), 'Predicted |Z|': y_pre}))\n",
        "\n",
        "except Exception as e:\n",
        "    print(f\"\\nError during processing: {str(e)}\")\n",
        "    print(\"Please check your input file format.\")"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aALqYIhhnO37",
        "outputId": "81165115-b58e-4934-f948-586ae8777e75"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SVR training: (np.float64(0.0014084749143199774), 0.009887266608325894, 0.9999699741046698)\n",
            "SVR testing: (np.float64(0.17504717135650646), 1.3610383560140902, 0.4675121058176358)\n",
            "\n",
            "Data Preview:\n",
            "   MWc     r   U   MC\n",
            "0  MWc     r   U   MC\n",
            "1  230  0.55   5  5.5\n",
            "2  230   0.7  10  8.5\n",
            "3  230  0.85  15   10\n",
            "4  230     1  20    7\n",
            "\n",
            "Warning: Missing values detected after conversion:\n",
            "MWc    1\n",
            "r      1\n",
            "U      1\n",
            "MC     1\n",
            "dtype: int64\n",
            "\n",
            "Predictions:\n",
            "                      Features  Predicted |Z|\n",
            "0         [0.0, 0.0, 0.0, 0.0]       7.455029\n",
            "1      [230.0, 0.55, 5.0, 5.5]       4.900114\n",
            "2      [230.0, 0.7, 10.0, 8.5]       5.129807\n",
            "3    [230.0, 0.85, 15.0, 10.0]       6.069840\n",
            "4      [230.0, 1.0, 20.0, 7.0]       8.688534\n",
            "5     [400.0, 0.55, 10.0, 7.0]       4.759928\n",
            "6      [400.0, 0.7, 5.0, 10.0]       5.400018\n",
            "7     [400.0, 0.85, 20.0, 8.5]      10.070466\n",
            "8      [400.0, 1.0, 15.0, 5.5]      10.540071\n",
            "9    [2000.0, 0.55, 15.0, 8.5]       8.339928\n",
            "10    [2000.0, 0.7, 20.0, 5.5]      10.040014\n",
            "11    [2000.0, 0.85, 5.0, 7.0]       9.110122\n",
            "12   [2000.0, 1.0, 10.0, 10.0]       7.240172\n",
            "13  [4000.0, 0.55, 20.0, 10.0]       8.930146\n",
            "14    [4000.0, 0.7, 15.0, 7.0]       8.050025\n",
            "15   [4000.0, 0.85, 10.0, 5.5]       8.419864\n",
            "16     [4000.0, 1.0, 5.0, 8.5]       6.450046\n",
            "17    [230.0, 0.55, 20.0, 7.0]       4.889613\n",
            "18      [230.0, 0.7, 5.0, 5.5]       6.374408\n",
            "19    [230.0, 0.85, 10.0, 8.5]       6.443540\n",
            "20    [230.0, 1.0, 15.0, 10.0]       7.960309\n",
            "21    [400.0, 0.55, 15.0, 5.5]       5.019864\n",
            "22     [400.0, 0.7, 10.0, 7.0]       5.823689\n",
            "23    [400.0, 0.85, 5.0, 10.0]       6.536393\n",
            "24     [400.0, 1.0, 20.0, 8.5]       8.885474\n",
            "25  [2000.0, 0.55, 10.0, 10.0]       6.149621\n",
            "26    [2000.0, 0.7, 15.0, 8.5]       9.280390\n",
            "27   [2000.0, 0.85, 20.0, 5.5]       8.989776\n",
            "28     [2000.0, 1.0, 5.0, 7.0]       8.123251\n",
            "29    [4000.0, 0.55, 5.0, 8.5]       6.940025\n",
            "30   [4000.0, 0.7, 20.0, 10.0]       8.340030\n",
            "31   [4000.0, 0.85, 15.0, 7.0]       9.140090\n",
            "32    [4000.0, 1.0, 10.0, 5.5]       6.959723\n"
          ]
        }
      ]
    },
    {
      "source": [
        "###########################################################   SVR\n",
        "clf_SVR = svm.SVR(kernel='rbf',tol=1e-3,C=300,epsilon=0.01,gamma=1)\n",
        "clf_SVR.fit(training_X,training_Y)\n",
        "fit_SVR = clf_SVR.predict(training_X)\n",
        "pre_SVR = clf_SVR.predict(testing_X)\n",
        "\n",
        "training_criteria = criteria(fit_SVR, training_Y)\n",
        "testing_criteria = criteria(pre_SVR, testing_Y)\n",
        "print('SVR training',training_criteria)\n",
        "print('SVR testing', testing_criteria)\n",
        "\n",
        "\n",
        "training_temp.append(fit_SVR)\n",
        "testing_temp.append(pre_SVR)\n",
        "\n",
        "x_pre=[]\n",
        "y_pre=[]\n",
        "# Assuming 'data_32_2.csv' has a header row, skip it\n",
        "x_pre = pd.read_csv('data_32_2.csv', names=['MWc', 'r', 'U', 'MC'], header=0, dtype=float, on_bad_lines='skip')\n",
        "\n",
        "# If 'data_32_2.csv' does NOT have a header row, use:\n",
        "# x_pre = pd.read_csv('data_32_2.csv', names=['MWc', 'r', 'U', 'MC'], header=None, dtype=float, on_bad_lines='skip')\n",
        "\n",
        "\n",
        "y_pre=clf_SVR.predict(x_pre)\n",
        "\n",
        "print(x_pre,y_pre)"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0B8tLJPzno6j",
        "outputId": "694ce1e9-171c-4dd5-b8cd-8f16eda0b14c"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SVR training (np.float64(0.0014280796526170874), 0.010026070136817418, 0.9999691251431209)\n",
            "SVR testing (np.float64(0.22035715620176985), 2.1322740938083595, -0.3069382568128862)\n",
            "       MWc     r     U    MC\n",
            "0    230.0  0.55   5.0   5.5\n",
            "1    230.0  0.70  10.0   8.5\n",
            "2    230.0  0.85  15.0  10.0\n",
            "3    230.0  1.00  20.0   7.0\n",
            "4    400.0  0.55  10.0   7.0\n",
            "5    400.0  0.70   5.0  10.0\n",
            "6    400.0  0.85  20.0   8.5\n",
            "7    400.0  1.00  15.0   5.5\n",
            "8   2000.0  0.55  15.0   8.5\n",
            "9   2000.0  0.70  20.0   5.5\n",
            "10  2000.0  0.85   5.0   7.0\n",
            "11  2000.0  1.00  10.0  10.0\n",
            "12  4000.0  0.55  20.0  10.0\n",
            "13  4000.0  0.70  15.0   7.0\n",
            "14  4000.0  0.85  10.0   5.5\n",
            "15  4000.0  1.00   5.0   8.5\n",
            "16   230.0  0.55  20.0   7.0\n",
            "17   230.0  0.70   5.0   5.5\n",
            "18   230.0  0.85  10.0   8.5\n",
            "19   230.0  1.00  15.0  10.0\n",
            "20   400.0  0.55  15.0   5.5\n",
            "21   400.0  0.70  10.0   7.0\n",
            "22   400.0  0.85   5.0  10.0\n",
            "23   400.0  1.00  20.0   8.5\n",
            "24  2000.0  0.55  10.0  10.0\n",
            "25  2000.0  0.70  15.0   8.5\n",
            "26  2000.0  0.85  20.0   5.5\n",
            "27  2000.0  1.00   5.0   7.0\n",
            "28  4000.0  0.55   5.0   8.5\n",
            "29  4000.0  0.70  20.0  10.0\n",
            "30  4000.0  0.85  15.0   7.0\n",
            "31  4000.0  1.00  10.0   5.5 [ 4.90018352  5.12984517  6.06995329  5.3193821   4.7601582   5.40005903\n",
            " 10.06999818 10.5400279   8.35987283 10.03988318  9.11002748  7.22005381\n",
            "  8.93019355  8.05020749  8.4199591   6.45006807  4.8900681   4.95206431\n",
            "  5.17661627  7.95969539  5.01968263  4.81515438  5.44081821 10.00685699\n",
            "  6.15015813  9.27987356  8.98988234  9.06824445  6.91991466  8.36017725\n",
            "  9.14005946  6.95999759]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import KFold, cross_val_score ####交叉验证\n",
        "\n",
        "crossvalidation = KFold(n_splits = 10, shuffle = True)\n",
        "mape_scores = cross_val_score(clf_SVR, X, Y, scoring = 'neg_mean_absolute_percentage_error', cv = crossvalidation)\n",
        "r2_scores = cross_val_score(clf_SVR, X, Y, scoring = 'r2', cv = crossvalidation)\n",
        "rmse_scores = cross_val_score(clf_SVR, X, Y, scoring = 'neg_root_mean_squared_error', cv = crossvalidation)\n",
        "print('Cross-validation results:')\n",
        "print('Folds: %i, mean MAPE: %.3f' % (len(mape_scores), -np.mean(mape_scores)))\n",
        "print('Folds: %i, mean R2: %.3f' % (len(r2_scores), np.mean(r2_scores)))\n",
        "print('Folds: %i, mean RMSE: %.3f' % (len(rmse_scores), -np.mean(rmse_scores)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FZ22-I6wnudp",
        "outputId": "0ee460a5-abbe-4338-9e0a-66df2071e1c0"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cross-validation results:\n",
            "Folds: 10, mean MAPE: 0.262\n",
            "Folds: 10, mean R2: -8.413\n",
            "Folds: 10, mean RMSE: 1.936\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_predict\n",
        "y_cv = cross_val_predict(clf_SVR, X, Y, cv = crossvalidation)"
      ],
      "metadata": {
        "id": "haUVfzhAnx8p"
      },
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.figure(figsize = (5, 5))\n",
        "plt.plot([3, 12], [3, 12], 'r--')\n",
        "plt.scatter(Y, y_cv, s = 80, edgecolor = 'r', alpha = 0.7)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 462
        },
        "id": "HffhNZxzn05o",
        "outputId": "def8e8a7-67eb-4366-9a3e-dbbb938795ac"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7fcddcd12d90>"
            ]
          },
          "metadata": {},
          "execution_count": 34
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "training_temp = (np.array(training_temp).T.tolist())\n",
        "testing_temp = (np.array(testing_temp).T.tolist())\n",
        "\n",
        "paper_result = pd.DataFrame(training_temp)\n",
        "paper_result.to_csv('training_32_SVR.csv')\n",
        "testing_result = pd.DataFrame(testing_temp)\n",
        "testing_result.to_csv('testing_32_SVR.csv')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 228
        },
        "id": "nAaWF2C33G4j",
        "outputId": "22ad8ab1-e270-42aa-b7c2-ad40331c11fd"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (28,) + inhomogeneous part.",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-49-e778e1867614>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtraining_temp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtraining_temp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtolist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mtesting_temp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtesting_temp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtolist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mpaper_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtraining_temp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mpaper_result\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'training_32_SVR.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (28,) + inhomogeneous part."
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "\n",
        "# Load training data\n",
        "clf_DT = DecisionTreeRegressor()\n",
        "clf_DT.fit(training_X, training_Y)\n",
        "\n",
        "# Predict on training and testing data\n",
        "fit_DT = clf_DT.predict(training_X)\n",
        "pre_DT = clf_DT.predict(testing_X)\n",
        "\n",
        "# Evaluate\n",
        "training_criteria = criteria(fit_DT, training_Y)\n",
        "testing_criteria = criteria(pre_DT, testing_Y)\n",
        "\n",
        "print('DT training', training_criteria)\n",
        "print('DT testing', testing_criteria)\n",
        "\n",
        "# Append results\n",
        "training_temp.append(fit_DT)\n",
        "testing_temp.append(pre_DT)\n",
        "\n",
        "# Load prediction data correctly\n",
        "x_pre = pd.read_csv('data_32_2.csv', names=['MWc', 'r', 'U', 'MC'], header=0)\n",
        "\n",
        "# Convert to numeric and handle missing values\n",
        "x_pre = x_pre.apply(pd.to_numeric, errors='coerce')\n",
        "x_pre.fillna(x_pre.mean(), inplace=True)\n",
        "\n",
        "# Convert to NumPy array\n",
        "x_pre = np.array(x_pre)\n",
        "\n",
        "# Predict\n",
        "y_pre = clf_DT.predict(x_pre)\n",
        "\n",
        "print(x_pre, y_pre)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GpTWS5-w6-Zi",
        "outputId": "5d66d046-5f36-4918-82c8-68606728130c"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DT training (np.float64(0.0), 0.0, 1.0)\n",
            "DT testing (np.float64(0.1311254169364284), 1.4743473132203277, 0.37516029984430543)\n",
            "[[2.3e+02 5.5e-01 5.0e+00 5.5e+00]\n",
            " [2.3e+02 7.0e-01 1.0e+01 8.5e+00]\n",
            " [2.3e+02 8.5e-01 1.5e+01 1.0e+01]\n",
            " [2.3e+02 1.0e+00 2.0e+01 7.0e+00]\n",
            " [4.0e+02 5.5e-01 1.0e+01 7.0e+00]\n",
            " [4.0e+02 7.0e-01 5.0e+00 1.0e+01]\n",
            " [4.0e+02 8.5e-01 2.0e+01 8.5e+00]\n",
            " [4.0e+02 1.0e+00 1.5e+01 5.5e+00]\n",
            " [2.0e+03 5.5e-01 1.5e+01 8.5e+00]\n",
            " [2.0e+03 7.0e-01 2.0e+01 5.5e+00]\n",
            " [2.0e+03 8.5e-01 5.0e+00 7.0e+00]\n",
            " [2.0e+03 1.0e+00 1.0e+01 1.0e+01]\n",
            " [4.0e+03 5.5e-01 2.0e+01 1.0e+01]\n",
            " [4.0e+03 7.0e-01 1.5e+01 7.0e+00]\n",
            " [4.0e+03 8.5e-01 1.0e+01 5.5e+00]\n",
            " [4.0e+03 1.0e+00 5.0e+00 8.5e+00]\n",
            " [2.3e+02 5.5e-01 2.0e+01 7.0e+00]\n",
            " [2.3e+02 7.0e-01 5.0e+00 5.5e+00]\n",
            " [2.3e+02 8.5e-01 1.0e+01 8.5e+00]\n",
            " [2.3e+02 1.0e+00 1.5e+01 1.0e+01]\n",
            " [4.0e+02 5.5e-01 1.5e+01 5.5e+00]\n",
            " [4.0e+02 7.0e-01 1.0e+01 7.0e+00]\n",
            " [4.0e+02 8.5e-01 5.0e+00 1.0e+01]\n",
            " [4.0e+02 1.0e+00 2.0e+01 8.5e+00]\n",
            " [2.0e+03 5.5e-01 1.0e+01 1.0e+01]\n",
            " [2.0e+03 7.0e-01 1.5e+01 8.5e+00]\n",
            " [2.0e+03 8.5e-01 2.0e+01 5.5e+00]\n",
            " [2.0e+03 1.0e+00 5.0e+00 7.0e+00]\n",
            " [4.0e+03 5.5e-01 5.0e+00 8.5e+00]\n",
            " [4.0e+03 7.0e-01 2.0e+01 1.0e+01]\n",
            " [4.0e+03 8.5e-01 1.5e+01 7.0e+00]\n",
            " [4.0e+03 1.0e+00 1.0e+01 5.5e+00]] [ 4.89  5.12  6.06  7.97  4.75  5.39 10.08 10.55  8.35 10.05  9.12  7.23\n",
            "  8.94  8.04  8.43  6.44  4.88  4.89  5.12  7.97  5.01  4.75  5.39 10.55\n",
            "  6.14  9.29  8.98  6.95  6.93  8.35  9.15  6.95]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but DecisionTreeRegressor was fitted with feature names\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import KFold, cross_val_score ####交叉验证\n",
        "\n",
        "crossvalidation = KFold(n_splits = 10, shuffle = True)\n",
        "mape_scores = cross_val_score(clf_DT, X, Y, scoring = 'neg_mean_absolute_percentage_error', cv = crossvalidation)\n",
        "r2_scores = cross_val_score(clf_DT, X, Y, scoring = 'r2', cv = crossvalidation)\n",
        "rmse_scores = cross_val_score(clf_DT, X, Y, scoring = 'neg_root_mean_squared_error', cv = crossvalidation)\n",
        "print('Cross-validation results:')\n",
        "print('Folds: %i, mean MAPE: %.3f' % (len(mape_scores), -np.mean(mape_scores)))\n",
        "print('Folds: %i, mean R2: %.3f' % (len(r2_scores), np.mean(r2_scores)))\n",
        "print('Folds: %i, mean RMSE: %.3f' % (len(rmse_scores), -np.mean(rmse_scores)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9N9mJEn87YhT",
        "outputId": "8a10940d-4d4d-4847-e2ba-35646ab0a011"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cross-validation results:\n",
            "Folds: 10, mean MAPE: 0.221\n",
            "Folds: 10, mean R2: -2.940\n",
            "Folds: 10, mean RMSE: 1.823\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_predict\n",
        "y_cv = cross_val_predict(clf_DT, X, Y, cv = crossvalidation)"
      ],
      "metadata": {
        "id": "uL5EA9FJ7e6K"
      },
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "plt.figure(figsize=(6, 6), dpi=120)  # Increase figure size and resolution\n",
        "\n",
        "# Identity line (perfect predictions)\n",
        "plt.plot([3, 12], [3, 12], 'r--', linewidth=2, label=\"Ideal Prediction Line\")\n",
        "\n",
        "# Scatter plot with colormap\n",
        "scatter = plt.scatter(Y, y_cv, c=np.abs(Y - y_cv), cmap='coolwarm',\n",
        "                      s=100, edgecolor='k', alpha=0.8)\n",
        "\n",
        "# Add color bar to indicate error magnitude\n",
        "cbar = plt.colorbar(scatter)\n",
        "cbar.set_label('Prediction Error', fontsize=12)\n",
        "\n",
        "# Labels and title\n",
        "plt.xlabel('Actual Values (Y)', fontsize=14)\n",
        "plt.ylabel('Predicted Values (y_cv)', fontsize=14)\n",
        "plt.title('Actual vs Predicted Values', fontsize=16, fontweight='bold')\n",
        "\n",
        "# Grid and legend\n",
        "plt.grid(True, linestyle='--', alpha=0.6)\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 684
        },
        "id": "QwJlQAkW7hjh",
        "outputId": "cf8f5119-ba5d-4315-9f2b-d30ea6c1d42a"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x720 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "# Ensure all appended elements are lists\n",
        "training_temp = [list(item) if isinstance(item, (np.ndarray, list)) else [item] for item in training_temp]\n",
        "testing_temp = [list(item) if isinstance(item, (np.ndarray, list)) else [item] for item in testing_temp]\n",
        "\n",
        "# Find max length and pad shorter lists with NaN\n",
        "max_len = max(len(row) for row in training_temp)\n",
        "training_temp = [row + [np.nan] * (max_len - len(row)) for row in training_temp]\n",
        "testing_temp = [row + [np.nan] * (max_len - len(row)) for row in testing_temp]\n",
        "\n",
        "# Convert to NumPy array, transpose, and save\n",
        "training_temp = np.array(training_temp, dtype=object).T.tolist()\n",
        "testing_temp = np.array(testing_temp, dtype=object).T.tolist()\n",
        "\n",
        "# Save to CSV\n",
        "paper_result = pd.DataFrame(training_temp)\n",
        "paper_result.to_csv('training_32_DT.csv', index=False)\n",
        "\n",
        "testing_result = pd.DataFrame(testing_temp)\n",
        "testing_result.to_csv('testing_32_DT.csv', index=False)\n"
      ],
      "metadata": {
        "id": "9uZWqSNn7rGa"
      },
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Bayesian optimization for screening optimal candidate\n"
      ],
      "metadata": {
        "id": "KwoQleKB7767"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "import numpy as np\n",
        "import pandas as pd"
      ],
      "metadata": {
        "id": "OJnzqV4Z79DP"
      },
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data = pd.read_csv('data_32_2.csv', names = ['MWc', 'r', 'U', 'MC', '|Z|'])\n",
        "data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "B3qqMSYY8AyK",
        "outputId": "7a83384e-3393-459b-86e6-9e0ed360ef2a"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   MWc     r   U   MC  |Z|\n",
              "0  MWc     r   U   MC  NaN\n",
              "1  230  0.55   5  5.5  NaN\n",
              "2  230   0.7  10  8.5  NaN\n",
              "3  230  0.85  15   10  NaN\n",
              "4  230     1  20    7  NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c335e5ee-4c19-4d7e-9dcf-155d32295cfc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>MWc</th>\n",
              "      <th>r</th>\n",
              "      <th>U</th>\n",
              "      <th>MC</th>\n",
              "      <th>|Z|</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>MWc</td>\n",
              "      <td>r</td>\n",
              "      <td>U</td>\n",
              "      <td>MC</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>230</td>\n",
              "      <td>0.55</td>\n",
              "      <td>5</td>\n",
              "      <td>5.5</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>230</td>\n",
              "      <td>0.7</td>\n",
              "      <td>10</td>\n",
              "      <td>8.5</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>230</td>\n",
              "      <td>0.85</td>\n",
              "      <td>15</td>\n",
              "      <td>10</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>230</td>\n",
              "      <td>1</td>\n",
              "      <td>20</td>\n",
              "      <td>7</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c335e5ee-4c19-4d7e-9dcf-155d32295cfc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c335e5ee-4c19-4d7e-9dcf-155d32295cfc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c335e5ee-4c19-4d7e-9dcf-155d32295cfc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-433f5fc1-c31f-47ec-b5b4-a83ebb2817bd\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-433f5fc1-c31f-47ec-b5b4-a83ebb2817bd')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-433f5fc1-c31f-47ec-b5b4-a83ebb2817bd button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 33,\n  \"fields\": [\n    {\n      \"column\": \"MWc\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"230\",\n          \"4000\",\n          \"400\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"r\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"0.55\",\n          \"1\",\n          \"0.7\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"U\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"5\",\n          \"20\",\n          \"10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MC\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"5.5\",\n          \"7\",\n          \"8.5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"|Z|\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split"
      ],
      "metadata": {
        "id": "yocM4kVe8YDu"
      },
      "execution_count": 61,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "training_X,testing_X,training_Y,testing_Y = train_test_split(X, y, test_size = 0.2, random_state = 1)\n",
        "print(training_Y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HhS6hwgd8bvh",
        "outputId": "98dc8454-4def-4e11-84e5-a1654a1379a8"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "28     6.93\n",
            "19     7.97\n",
            "14     8.43\n",
            "24     6.14\n",
            "10     9.12\n",
            "20     5.01\n",
            "26     8.98\n",
            "4      4.75\n",
            "2      6.06\n",
            "25     9.29\n",
            "6     10.08\n",
            "13     8.04\n",
            "7     10.55\n",
            "29     8.35\n",
            "1      5.12\n",
            "16     4.88\n",
            "0      4.89\n",
            "15     6.44\n",
            "31     6.95\n",
            "30     9.15\n",
            "9     10.05\n",
            "8      8.35\n",
            "12     8.94\n",
            "11     7.23\n",
            "5      5.39\n",
            "Name: lg|Z|, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "clf_RF = RandomForestRegressor(n_estimators=2000,min_samples_leaf=1,max_features=2,oob_score=True)\n",
        "clf_RF.fit(X.values, y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "YHfdswtm8e8g",
        "outputId": "3d61ff85-cf1f-4ad6-deb3-e6bf74075101"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestRegressor(max_features=2, n_estimators=2000, oob_score=True)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(max_features=2, n_estimators=2000, oob_score=True)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestRegressor</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestRegressor.html\">?<span>Documentation for RandomForestRegressor</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestRegressor(max_features=2, n_estimators=2000, oob_score=True)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install GPyOpt\n",
        "\n",
        "import GPyOpt"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 963
        },
        "id": "6bymqs648j72",
        "outputId": "4f8c2fcd-6ff6-4368-c561-d872864769ab"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting GPyOpt\n",
            "  Downloading GPyOpt-1.2.6.tar.gz (56 kB)\n",
            "\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/56.8 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.8/56.8 kB\u001b[0m \u001b[31m2.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: numpy>=1.7 in /usr/local/lib/python3.11/dist-packages (from GPyOpt) (2.0.2)\n",
            "Requirement already satisfied: scipy>=0.16 in /usr/local/lib/python3.11/dist-packages (from GPyOpt) (1.14.1)\n",
            "Collecting GPy>=1.8 (from GPyOpt)\n",
            "  Downloading GPy-1.13.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.3 kB)\n",
            "Collecting numpy>=1.7 (from GPyOpt)\n",
            "  Downloading numpy-1.26.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (61 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m61.0/61.0 kB\u001b[0m \u001b[31m4.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: six in /usr/local/lib/python3.11/dist-packages (from GPy>=1.8->GPyOpt) (1.17.0)\n",
            "Collecting paramz>=0.9.6 (from GPy>=1.8->GPyOpt)\n",
            "  Downloading paramz-0.9.6-py3-none-any.whl.metadata (1.4 kB)\n",
            "Requirement already satisfied: cython>=0.29 in /usr/local/lib/python3.11/dist-packages (from GPy>=1.8->GPyOpt) (3.0.12)\n",
            "Collecting scipy>=0.16 (from GPyOpt)\n",
            "  Downloading scipy-1.12.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (60 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m60.4/60.4 kB\u001b[0m \u001b[31m5.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: decorator>=4.0.10 in /usr/local/lib/python3.11/dist-packages (from paramz>=0.9.6->GPy>=1.8->GPyOpt) (4.4.2)\n",
            "Downloading GPy-1.13.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.8 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.8/3.8 MB\u001b[0m \u001b[31m26.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading numpy-1.26.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (18.3 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m18.3/18.3 MB\u001b[0m \u001b[31m68.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading scipy-1.12.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (38.4 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m38.4/38.4 MB\u001b[0m \u001b[31m14.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading paramz-0.9.6-py3-none-any.whl (103 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m103.2/103.2 kB\u001b[0m \u001b[31m9.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hBuilding wheels for collected packages: GPyOpt\n",
            "  Building wheel for GPyOpt (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for GPyOpt: filename=GPyOpt-1.2.6-py3-none-any.whl size=83602 sha256=2346987d9d8ee8ebf22c4668d1870dbd00626775c6964e73d7b567aa29f96e44\n",
            "  Stored in directory: /root/.cache/pip/wheels/b3/5e/fb/38ca2bae62f9d07f22d246c55dd1f4721ac40f82dc6c2f348c\n",
            "Successfully built GPyOpt\n",
            "Installing collected packages: numpy, scipy, paramz, GPy, GPyOpt\n",
            "  Attempting uninstall: numpy\n",
            "    Found existing installation: numpy 2.0.2\n",
            "    Uninstalling numpy-2.0.2:\n",
            "      Successfully uninstalled numpy-2.0.2\n",
            "  Attempting uninstall: scipy\n",
            "    Found existing installation: scipy 1.14.1\n",
            "    Uninstalling scipy-1.14.1:\n",
            "      Successfully uninstalled scipy-1.14.1\n",
            "Successfully installed GPy-1.13.2 GPyOpt-1.2.6 numpy-1.26.4 paramz-0.9.6 scipy-1.12.0\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "RuntimeError",
          "evalue": "empty_like method already has a different docstring",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-66-442664480d99>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msystem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'pip install GPyOpt'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mGPyOpt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/GPyOpt/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mwarnings\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfilterwarnings\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcategory\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mDeprecationWarning\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mGPyOpt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mspace\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mDesign_space\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmethods\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/GPyOpt/core/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m# Licensed under the BSD 3-clause license (see LICENSE.txt)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mbo\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mBO\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtask\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0;34m.\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0macquisitions\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0macquisition\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/GPyOpt/core/bo.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutil\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgeneral\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mbest_value\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnormalize\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutil\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mduplicate_manager\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mDuplicateManager\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merrors\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mInvalidConfigError\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcost\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mCostModel\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/GPyOpt/util/duplicate_manager.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mspace\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mDesign_space\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0mDuplicateManager\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobject\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/GPyOpt/core/task/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m# Licensed under the BSD 3-clause license (see LICENSE.txt)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mobjective\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mSingleObjective\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mspace\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mcost\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/GPyOpt/core/task/objective.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m...\u001b[0m\u001b[0mutil\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgeneral\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mspawn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m...\u001b[0m\u001b[0mutil\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgeneral\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mget_d_moments\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mGPy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mGPyOpt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/GPy/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mwarnings\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfilterwarnings\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcategory\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mDeprecationWarning\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmodels\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmappings\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/GPy/core/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     43\u001b[0m \"\"\"\n\u001b[1;32m     44\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 45\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mGPy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mModel\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     46\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mparameterization\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mParam\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mParameterized\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     47\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mparameterization\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/GPy/core/model.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Copyright (c) 2012-2014, GPy authors (see AUTHORS.txt).\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m# Licensed under the BSD 3-clause license (see LICENSE.txt)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mparameterization\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpriorizable\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mPriorizable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mparamz\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mModel\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mParamzModel\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/GPy/core/parameterization/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;31m# Licensed under the BSD 3-clause license (see LICENSE.txt)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mparam\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mParam\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mparameterized\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mParameterized\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtransformations\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/GPy/core/parameterization/param.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m# Licensed under the BSD 3-clause license (see LICENSE.txt)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mparamz\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mParam\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mpriorizable\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mPriorizable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mparamz\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransformations\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0m__fixed__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/paramz/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     32\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     33\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mutil\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 34\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mmodel\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mModel\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     35\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mparameterized\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mParameterized\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mparam\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mParam\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/paramz/model.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0moptimization\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 39\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mparameterized\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mParameterized\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     40\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0moptimization\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mverbose_optimization\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mVerboseOptimization\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     41\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmultiprocessing\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mmp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/paramz/parameterized.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     37\u001b[0m     \u001b[0;32mfrom\u001b[0m \u001b[0mre\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mPattern\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0m_pattern_type\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 39\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameter_core\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mParameterizable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0madjust_name_for_printing\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     40\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mcore\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mHierarchyError\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     41\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/paramz/core/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     44\u001b[0m     \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     45\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 46\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mindex_operations\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlists_and_dicts\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mobservable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mobservable_array\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparameter_core\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mupdateable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     47\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mparamz\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdomains\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     48\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mparamz\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtransformations\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/paramz/core/index_operations.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction_base\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mvectorize\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     33\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mlists_and_dicts\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mIntArrayDict\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mfunctools\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mreduce\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/numpy/lib/function_base.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_utils\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mset_module\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumeric\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0m_nx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcore\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtranspose\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m from numpy.core.numeric import (\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/numpy/core/numeric.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmultiarray\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m from .multiarray import (\n\u001b[0m\u001b[1;32m     12\u001b[0m     \u001b[0mfastCopyAndTranspose\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mALLOW_THREADS\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m     \u001b[0mBUFSIZE\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mCLIP\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mMAXDIMS\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mMAY_SHARE_BOUNDS\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mMAY_SHARE_EXACT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mRAISE\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/numpy/core/multiarray.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     83\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     84\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 85\u001b[0;31m \u001b[0;34m@\u001b[0m\u001b[0marray_function_from_c_func_and_dispatcher\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_multiarray_umath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mempty_like\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     86\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mempty_like\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprototype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msubok\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshape\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     87\u001b[0m     \"\"\"\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/numpy/_core/overrides.py\u001b[0m in \u001b[0;36mdecorator\u001b[0;34m(dispatcher)\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/numpy/_core/overrides.py\u001b[0m in \u001b[0;36mdecorator\u001b[0;34m(implementation)\u001b[0m\n",
            "\u001b[0;31mRuntimeError\u001b[0m: empty_like method already has a different docstring"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install --upgrade numpy\n",
        "!pip install --no-cache-dir GPyOpt"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X5Wb9ju78wrL",
        "outputId": "2cb79c42-ec2f-4dc6-ee76-2c2c8a9f6080"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (1.26.4)\n",
            "Collecting numpy\n",
            "  Downloading numpy-2.2.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (62 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.0/62.0 kB\u001b[0m \u001b[31m1.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading numpy-2.2.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (16.4 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m16.4/16.4 MB\u001b[0m \u001b[31m28.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: numpy\n",
            "  Attempting uninstall: numpy\n",
            "    Found existing installation: numpy 1.26.4\n",
            "    Uninstalling numpy-1.26.4:\n",
            "      Successfully uninstalled numpy-1.26.4\n",
            "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "scipy 1.12.0 requires numpy<1.29.0,>=1.22.4, but you have numpy 2.2.4 which is incompatible.\n",
            "gpy 1.13.2 requires numpy<2.0.0,>=1.7, but you have numpy 2.2.4 which is incompatible.\n",
            "numba 0.60.0 requires numpy<2.1,>=1.22, but you have numpy 2.2.4 which is incompatible.\n",
            "tensorflow 2.18.0 requires numpy<2.1.0,>=1.26.0, but you have numpy 2.2.4 which is incompatible.\u001b[0m\u001b[31m\n",
            "\u001b[0mSuccessfully installed numpy-2.2.4\n",
            "Requirement already satisfied: GPyOpt in /usr/local/lib/python3.11/dist-packages (1.2.6)\n",
            "Requirement already satisfied: numpy>=1.7 in /usr/local/lib/python3.11/dist-packages (from GPyOpt) (2.2.4)\n",
            "Requirement already satisfied: scipy>=0.16 in /usr/local/lib/python3.11/dist-packages (from GPyOpt) (1.12.0)\n",
            "Requirement already satisfied: GPy>=1.8 in /usr/local/lib/python3.11/dist-packages (from GPyOpt) (1.13.2)\n",
            "Collecting numpy>=1.7 (from GPyOpt)\n",
            "  Downloading numpy-1.26.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (61 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m61.0/61.0 kB\u001b[0m \u001b[31m3.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: six in /usr/local/lib/python3.11/dist-packages (from GPy>=1.8->GPyOpt) (1.17.0)\n",
            "Requirement already satisfied: paramz>=0.9.6 in /usr/local/lib/python3.11/dist-packages (from GPy>=1.8->GPyOpt) (0.9.6)\n",
            "Requirement already satisfied: cython>=0.29 in /usr/local/lib/python3.11/dist-packages (from GPy>=1.8->GPyOpt) (3.0.12)\n",
            "Requirement already satisfied: decorator>=4.0.10 in /usr/local/lib/python3.11/dist-packages (from paramz>=0.9.6->GPy>=1.8->GPyOpt) (4.4.2)\n",
            "Downloading numpy-1.26.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (18.3 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m18.3/18.3 MB\u001b[0m \u001b[31m234.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: numpy\n",
            "  Attempting uninstall: numpy\n",
            "    Found existing installation: numpy 2.2.4\n",
            "    Uninstalling numpy-2.2.4:\n",
            "      Successfully uninstalled numpy-2.2.4\n",
            "Successfully installed numpy-1.26.4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "bounds = [{'name': 'var_1', 'type':'discrete', 'domain':(400, 2000)},\n",
        "         {'name': 'var_2', 'type':'discrete', 'domain':(0.85, 0.86, 0.87, 0.88, 0.89, 0.90, 0.91,\n",
        "                                                        0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99, 1.00)},\n",
        "         {'name': 'var_3', 'type':'discrete', 'domain':(range(10, 21))},\n",
        "         {'name': 'var_4', 'type':'discrete', 'domain':(5.5, 5.6, 5.7, 5.8, 5.9, 6.0, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 7.0, 7.1,\n",
        "                                                        7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8.0, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8,\n",
        "                                                        8.9, 9.0, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10)}]\n"
      ],
      "metadata": {
        "id": "5dvs1CAH9tW3"
      },
      "execution_count": 71,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install bayesian-optimization"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L0RTU3Yl9-To",
        "outputId": "678613cb-7b3a-409b-a899-c15573ca1a3d"
      },
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting bayesian-optimization\n",
            "  Downloading bayesian_optimization-2.0.3-py3-none-any.whl.metadata (9.0 kB)\n",
            "Collecting colorama<0.5.0,>=0.4.6 (from bayesian-optimization)\n",
            "  Downloading colorama-0.4.6-py2.py3-none-any.whl.metadata (17 kB)\n",
            "Requirement already satisfied: numpy>=1.25 in /usr/local/lib/python3.11/dist-packages (from bayesian-optimization) (1.26.4)\n",
            "Requirement already satisfied: scikit-learn<2.0.0,>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from bayesian-optimization) (1.6.1)\n",
            "Requirement already satisfied: scipy<2.0.0,>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from bayesian-optimization) (1.12.0)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn<2.0.0,>=1.0.0->bayesian-optimization) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn<2.0.0,>=1.0.0->bayesian-optimization) (3.6.0)\n",
            "Downloading bayesian_optimization-2.0.3-py3-none-any.whl (31 kB)\n",
            "Downloading colorama-0.4.6-py2.py3-none-any.whl (25 kB)\n",
            "Installing collected packages: colorama, bayesian-optimization\n",
            "Successfully installed bayesian-optimization-2.0.3 colorama-0.4.6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from bayes_opt import BayesianOptimization\n",
        "\n",
        "# Define the objective function\n",
        "def model(x):\n",
        "    return - (x - 3) ** 2 + 5  # Example function\n",
        "\n",
        "# Define the search space\n",
        "bounds = {\"x\": (0, 6)}\n",
        "\n",
        "# Create Bayesian Optimizer\n",
        "bo = BayesianOptimization(f=model, pbounds=bounds, random_state=42)\n",
        "\n",
        "# Run optimization\n",
        "bo.maximize(n_iter=10)\n",
        "\n",
        "# Print best result\n",
        "print(\"Best result:\", bo.max)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OfSV5tFQDqh_",
        "outputId": "b32461e0-80bd-474a-dc8c-fc012337108e"
      },
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "|   iter    |  target   |     x     |\n",
            "-------------------------------------\n",
            "| \u001b[39m1        \u001b[39m | \u001b[39m4.433    \u001b[39m | \u001b[39m2.247    \u001b[39m |\n",
            "| \u001b[39m2        \u001b[39m | \u001b[39m-2.313   \u001b[39m | \u001b[39m5.704    \u001b[39m |\n",
            "| \u001b[39m3        \u001b[39m | \u001b[39m3.062    \u001b[39m | \u001b[39m4.392    \u001b[39m |\n",
            "| \u001b[35m4        \u001b[39m | \u001b[35m4.65     \u001b[39m | \u001b[35m3.592    \u001b[39m |\n",
            "| \u001b[39m5        \u001b[39m | \u001b[39m0.7404   \u001b[39m | \u001b[39m0.9361   \u001b[39m |\n",
            "| \u001b[35m6        \u001b[39m | \u001b[35m4.99     \u001b[39m | \u001b[35m2.9      \u001b[39m |\n",
            "| \u001b[39m7        \u001b[39m | \u001b[39m4.962    \u001b[39m | \u001b[39m3.194    \u001b[39m |\n",
            "| \u001b[39m8        \u001b[39m | \u001b[39m4.887    \u001b[39m | \u001b[39m2.664    \u001b[39m |\n",
            "| \u001b[35m9        \u001b[39m | \u001b[35m4.999    \u001b[39m | \u001b[35m3.033    \u001b[39m |\n",
            "| \u001b[35m10       \u001b[39m | \u001b[35m5.0      \u001b[39m | \u001b[35m2.994    \u001b[39m |\n",
            "| \u001b[35m11       \u001b[39m | \u001b[35m5.0      \u001b[39m | \u001b[35m2.995    \u001b[39m |\n",
            "| \u001b[35m12       \u001b[39m | \u001b[35m5.0      \u001b[39m | \u001b[35m2.996    \u001b[39m |\n",
            "| \u001b[39m13       \u001b[39m | \u001b[39m4.999    \u001b[39m | \u001b[39m3.034    \u001b[39m |\n",
            "| \u001b[39m14       \u001b[39m | \u001b[39m5.0      \u001b[39m | \u001b[39m2.984    \u001b[39m |\n",
            "| \u001b[39m15       \u001b[39m | \u001b[39m5.0      \u001b[39m | \u001b[39m2.987    \u001b[39m |\n",
            "=====================================\n",
            "Best result: {'target': np.float64(4.999987749429444), 'params': {'x': np.float64(2.9964999184928827)}}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "max_iter = 1000\n"
      ],
      "metadata": {
        "id": "yLuAgwAwDt8K"
      },
      "execution_count": 90,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "bo.maximize(init_points=5, n_iter=20)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2AMEa815DzE5",
        "outputId": "672cc9c7-d5b8-4a2f-9318-d23c985f55b8"
      },
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "|   iter    |  target   |     x     |\n",
            "-------------------------------------\n",
            "| \u001b[39m16       \u001b[39m | \u001b[39m0.7398   \u001b[39m | \u001b[39m0.936    \u001b[39m |\n",
            "| \u001b[39m17       \u001b[39m | \u001b[39m-2.03    \u001b[39m | \u001b[39m0.3485   \u001b[39m |\n",
            "| \u001b[39m18       \u001b[39m | \u001b[39m0.1729   \u001b[39m | \u001b[39m5.197    \u001b[39m |\n",
            "| \u001b[39m19       \u001b[39m | \u001b[39m4.632    \u001b[39m | \u001b[39m3.607    \u001b[39m |\n",
            "| \u001b[39m20       \u001b[39m | \u001b[39m3.441    \u001b[39m | \u001b[39m4.248    \u001b[39m |\n",
            "| \u001b[39m21       \u001b[39m | \u001b[39m5.0      \u001b[39m | \u001b[39m3.021    \u001b[39m |\n",
            "| \u001b[39m22       \u001b[39m | \u001b[39m5.0      \u001b[39m | \u001b[39m2.986    \u001b[39m |\n",
            "| \u001b[39m23       \u001b[39m | \u001b[39m5.0      \u001b[39m | \u001b[39m2.988    \u001b[39m |\n",
            "| \u001b[39m24       \u001b[39m | \u001b[39m4.999    \u001b[39m | \u001b[39m3.026    \u001b[39m |\n",
            "| \u001b[39m25       \u001b[39m | \u001b[39m5.0      \u001b[39m | \u001b[39m2.986    \u001b[39m |\n",
            "| \u001b[39m26       \u001b[39m | \u001b[39m5.0      \u001b[39m | \u001b[39m2.989    \u001b[39m |\n",
            "| \u001b[39m27       \u001b[39m | \u001b[39m4.999    \u001b[39m | \u001b[39m3.023    \u001b[39m |\n",
            "| \u001b[39m28       \u001b[39m | \u001b[39m5.0      \u001b[39m | \u001b[39m2.987    \u001b[39m |\n",
            "| \u001b[39m29       \u001b[39m | \u001b[39m5.0      \u001b[39m | \u001b[39m2.99     \u001b[39m |\n",
            "| \u001b[39m30       \u001b[39m | \u001b[39m5.0      \u001b[39m | \u001b[39m3.02     \u001b[39m |\n",
            "| \u001b[39m31       \u001b[39m | \u001b[39m5.0      \u001b[39m | \u001b[39m2.987    \u001b[39m |\n",
            "| \u001b[39m32       \u001b[39m | \u001b[39m5.0      \u001b[39m | \u001b[39m3.016    \u001b[39m |\n",
            "| \u001b[39m33       \u001b[39m | \u001b[39m5.0      \u001b[39m | \u001b[39m2.987    \u001b[39m |\n",
            "| \u001b[39m34       \u001b[39m | \u001b[39m5.0      \u001b[39m | \u001b[39m2.99     \u001b[39m |\n",
            "| \u001b[39m35       \u001b[39m | \u001b[39m5.0      \u001b[39m | \u001b[39m3.016    \u001b[39m |\n",
            "| \u001b[39m36       \u001b[39m | \u001b[39m5.0      \u001b[39m | \u001b[39m2.989    \u001b[39m |\n",
            "| \u001b[39m37       \u001b[39m | \u001b[39m5.0      \u001b[39m | \u001b[39m3.012    \u001b[39m |\n",
            "| \u001b[39m38       \u001b[39m | \u001b[39m5.0      \u001b[39m | \u001b[39m2.988    \u001b[39m |\n",
            "| \u001b[39m39       \u001b[39m | \u001b[39m5.0      \u001b[39m | \u001b[39m3.011    \u001b[39m |\n",
            "| \u001b[39m40       \u001b[39m | \u001b[39m5.0      \u001b[39m | \u001b[39m2.987    \u001b[39m |\n",
            "=====================================\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Best parameter values found\n",
        "best_params = bo.max['params']\n",
        "print(\"Best parameters:\", best_params)\n",
        "\n",
        "# Best function value\n",
        "best_value = bo.max['target']\n",
        "print(\"Best objective function value:\", best_value)\n",
        "\n",
        "# Save results manually\n",
        "import json\n",
        "\n",
        "with open('test-32-7-LT-1.txt', 'w') as f:\n",
        "    json.dump(bo.res, f, indent=4)\n",
        "\n",
        "# Visualization: Plot convergence manually\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "y_values = [res['target'] for res in bo.res]  # Get function values\n",
        "plt.plot(range(len(y_values)), y_values, marker='o', linestyle='--', color='b')\n",
        "plt.xlabel(\"Iteration\")\n",
        "plt.ylabel(\"Objective Function Value\")\n",
        "plt.title(\"Bayesian Optimization Convergence\")\n",
        "plt.grid()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 562
        },
        "id": "6IJNmHNcEJJ9",
        "outputId": "a7d8d803-7c28-4015-bb7d-53bae9bd90b5"
      },
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best parameters: {'x': np.float64(2.9964999184928827)}\n",
            "Best objective function value: 4.999987749429444\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x550 with 1 Axes>"
            ],
            "image/png": "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5969e2597JhLrWNIJ0mSpMD4iIiIiIjsinNkiYiIiMgpMcgSERERkVNikCUiIiIip8QgS0REREROiUGWiIiIiJwSgywREREROSUGWSIiIiJySgyyREQKWbRoUeaywXFxcVi0aBGuXr2qyVhWrlyJAwcOZLu9Xbt2mDp1qgYjIiJSHoMsEZEK4uLisHjxYs2C7OrVq3MMsosXL8bgwYM1GBERkfK4RC0RkROQJAlpaWk2L7tbs2ZNhUZERKQ9VmSJiBR2584dtG/fHgDw3nvvITQ0FKGhobhz5w4AIDU1FZ9++inatm2LsLAwPP/889iyZYvJNiZOnIiuXbviwIED6N69O2rXro29e/ciKSkJU6dORadOnVC3bl20a9cOH3/8MeLj4zOf265dO9y9exfff/995r43btyYeV/WqQW7du3Ciy++iNq1ayM8PByzZs3C06dPM+//448/EBoaiiNHjmDMmDGoX78+2rZti+XLl6vy+hERmYsVWSIihZUqVQqLFy/GyJEj8Z///AdNmjTJvB0Q4fa///0vRowYgapVq+LAgQMYN24c/Pz80Lp168ztPHz4ENOnT8c777yDsmXLIigoCCkpKcjIyMDo0aMRGBiIe/fu4auvvsLw4cOxZs0aAGL6wFtvvYUGDRpkTiMIDg7Ocay///47Ro0ahS5dumDMmDH4999/8dlnn+HevXtYuHChyWM/+eQTvPjii1iyZAn27NmD+fPnIzQ0FK1atVL8NSQiMgeDLBGRwgoWLIhnnnkGAFCxYkXUq1cv877jx49j7969WLFiBcLDwwEALVq0wKNHj7Bo0SKTIBsbG4vly5ejbt26JtufMmVK5uX09HSUL18er732Gq5fv47KlSujZs2aKFiwIEqUKGGy75wsXrwY9erVw4IFCwAArVq1gre3Nz7++GNcunQJoaGhmY/t2LEj3n33XQBAs2bNsH//fvz2228MskSkGU4tICKyoyNHjiAgIABNmzZFenp65lfz5s1x4cIFZGRkZD42ICAgW4gFgE2bNqFHjx6oX78+atWqhddeew0AcOPGDYvGkpiYiAsXLqBTp04mt7/wwgsAgFOnTpncLgdvANDpdKhatSru379v0T6JiJTEiiwRkR3FxMTgyZMnqFWrVo73P3r0CGXKlAEAlChRItv9u3fvxoQJE9CnTx+MHj0aAQEBePToEUaMGGEyr9Uc8fHxkCQJxYsXN7nd19cXBQsWRGxsbLbbjXl5eZnMzSUisjcGWSIiO/L390dgYCC+/vrrHO8PDAzMvKzT6bLdv3PnTjzzzDMmJ2ydOHHCqrH4+vpCp9MhOjra5Pb4+HikpqbC39/fqu0SEdkLgywRkQq8vLwAIFuVtHnz5vjmm2/g5eWFGjVqWLzdlJSUzG3LsnY8kPefX4W2aNGieOaZZ7Bz504MGjQo8/YdO3YAABo2bGjx+IiI7IlBlohIBSVLloSfnx+2bduG8uXLo2DBgggNDUWLFi3Qtm1bDB06FEOHDkVoaCiSk5Nx9epV3Lx5EzNmzMhzu82bN8fUqVOxZMkS1K9fHwcOHMCxY8eyPa5KlSo4fvw4jhw5Aj8/P5QvXx7FihXL9riRI0dixIgRGDt2LLp3747r16/js88+Q6dOnUxO9CIickQ82YuISAUeHh6YNWsW7ty5g0GDBqF37954+PAhAGDhwoXo27cv1q1bhzfffBP/93//h8OHD6NRo0b5brdv374YPHgw1q5di5EjR+LevXuZHQeM/ec//0GZMmXw7rvvonfv3ti3b1+O22vfvj2++OILXL58GcOHD8fy5cvxyiuvYN68eba9AEREdqCTJEnSehBERERERJZiRZaIiIiInBKDLBERERE5JQZZIiIiInJKDLJERERE5JQYZImIiIjIKTHIEhEREZFTYpAlIiIiIqfEIEtERERETolBloiIiIicEoMsERERETklBlkiIiIickoMskRERETklP4fPDBqu34gC+gAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}
